// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/Windows.Foundation.h"
namespace winrt::impl
{
    template <typename D> winrt::event_token consume_Windows_Foundation_Collections_IObservableVector`1<D>::VectorChanged(Windows::Foundation::Collections::VectorChangedEventHandler<T> const& vhnd) const
    {
        winrt::event_token winrt_impl_result;
        check_hresult(WINRT_SHIM(Windows::Foundation::Collections::IObservableVector`1)->add_VectorChanged(get_abi(vhnd), put_abi(winrt_impl_result)));
        return winrt_impl_result;
    }
    template <typename D> typename consume_Windows_Foundation_Collections_IObservableVector`1<D>::VectorChanged_revoker consume_Windows_Foundation_Collections_IObservableVector`1<D>::VectorChanged(auto_revoke_t, Windows::Foundation::Collections::VectorChangedEventHandler<T> const& vhnd) const
    {
        return impl::make_event_revoker<D, VectorChanged_revoker>(this, VectorChanged(vhnd));
    }
    template <typename D> void consume_Windows_Foundation_Collections_IObservableVector`1<D>::VectorChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_SHIM(Windows::Foundation::Collections::IObservableVector`1)->remove_VectorChanged(get_abi(token)));
    }
    template <typename D>
    struct produce<D, Windows::Foundation::Collections::IObservableVector<T>> : produce_base<D, Windows::Foundation::Collections::IObservableVector<T>>
    {
        int32_t WINRT_CALL add_VectorChanged(void* vhnd, winrt::event_token* winrt_impl_result) noexcept final
        {
            try
            {
                typename D::abi_guard guard(this->shim());
                *winrt_impl_result = detach_from<winrt::event_token>(this->shim().VectorChanged(*reinterpret_cast<Windows::Foundation::Collections::VectorChangedEventHandler<T> const*>(&vhnd)));
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL remove_VectorChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().VectorChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
    template <typename D>
    struct produce<D, Windows::Foundation::Collections::IPropertySet> : produce_base<D, Windows::Foundation::Collections::IPropertySet>
    {
    };
}
namespace winrt::Windows::Foundation::Collections
{
    inline PropertySet::PropertySet() :
        PropertySet(impl::call_factory<PropertySet>([](auto&& f) { return f.template ActivateInstance<PropertySet>(); }))
    {
    }
    inline StringMap::StringMap() :
        StringMap(impl::call_factory<StringMap>([](auto&& f) { return f.template ActivateInstance<StringMap>(); }))
    {
    }
    inline ValueSet::ValueSet() :
        ValueSet(impl::call_factory<ValueSet>([](auto&& f) { return f.template ActivateInstance<ValueSet>(); }))
    {
    }
}
namespace std
{
    template<> struct hash<winrt::Windows::Foundation::Collections::IObservableVector`1> : winrt::impl::hash_base<winrt::Windows::Foundation::Collections::IObservableVector`1> {};
    template<> struct hash<winrt::Windows::Foundation::Collections::IPropertySet> : winrt::impl::hash_base<winrt::Windows::Foundation::Collections::IPropertySet> {};
    template<> struct hash<winrt::Windows::Foundation::Collections::PropertySet> : winrt::impl::hash_base<winrt::Windows::Foundation::Collections::PropertySet> {};
    template<> struct hash<winrt::Windows::Foundation::Collections::StringMap> : winrt::impl::hash_base<winrt::Windows::Foundation::Collections::StringMap> {};
    template<> struct hash<winrt::Windows::Foundation::Collections::ValueSet> : winrt::impl::hash_base<winrt::Windows::Foundation::Collections::ValueSet> {};
}
