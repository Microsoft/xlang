#pragma once

namespace xlang
{
    template<typename F>
    void write_snake_case(writer& w, std::string_view const& name, F case_func)
    {
        w.write(case_func(name[0]));
        for (std::string_view::size_type i = 1; i < name.size() - 1; i++)
        {
            if (name.substr(i, 4) == "UInt")
            {
                w.write('_');
            }

            if (isupper(name[i]) && islower(name[i + 1]))
            {
                if (name.substr(i - 1, 4) != "UInt")
                {
                    w.write('_');
                }
            }

            w.write(case_func(name[i]));
        }
        w.write(case_func(name[name.size() - 1]));
    }

    void write_upper_snake_case(writer& w, std::string_view const& name)
    {
        write_snake_case(w, name, [](char c) { return static_cast<char>(::toupper(c)); });
    }

    void write_lower_snake_case(writer& w, std::string_view const& name)
    {
        write_snake_case(w, name, [](char c) { return static_cast<char>(::tolower(c)); });
    }

    void write_setup_filenames(writer& w, std::vector<std::string> const& namespaces)
    {
        XLANG_ASSERT(namespaces.size() > 0);

        for (auto&& ns : namespaces)
        {
            w.write("'%/src/py.%.cpp', ", settings.module, ns);
        }

        w.write("'%/src/_%.cpp'", settings.module, settings.module);
    }

    void write_license_python(writer& w)
    {
        w.write("# WARNING: Please don't edit this file. It was generated by Python/WinRT\n\n");
    }

    void write_import_type(writer& w, TypeDef const& type)
    {
        if (is_exclusive_to(type))
        {
            return;
        }

        w.write("@ = __ns__.@\n", type.TypeName(), type.TypeName());
    }

    void write_python_enum(writer& w, TypeDef const& type)
    {

        w.write("class %(enum.%):\n", type.TypeName(), is_flags_enum(type) ? "IntFlag" : "IntEnum");
        {
            writer::indent_guard g{ w };

            for (auto&& field : type.FieldList())
            {
                if (auto constant = field.Constant())
                {
                    w.write("% = %\n", bind<write_upper_snake_case>(field.Name()), *constant);
                }
            }
        }

        w.write("\n");
    }
}