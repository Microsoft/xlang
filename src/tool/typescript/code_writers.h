#pragma once

namespace xlang
{
    static void write_preamble(writer& w)
    {
        w.write(R"(// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING: Please don't edit this file. It was generated by  C++/WinRT v%
)", XLANG_VERSION_STRING);
    }

    static void write_type_namespace(writer& w, std::string_view const& ns)
    {
        auto format = R"(declare namespace @ {
)";

        w.write(format, ns);
    }

    static void write_close_namespace(writer& w)
    {
        auto format = R"(}
)";

        w.write(format);
    }

    static void write_parameters(writer& w, MethodDef method)
    {
        method_signature signature{ method };
        separator s{ w };

        for (auto&&[param, param_signature] : signature.params())
        {
            s();
            w.write("%: %", param.Name(), param_signature->Type());
        }
    }

    static void write_enum_field(writer& w, Field const& field)
    {
        auto format = R"(        % = %,
)";

        if (auto constant = field.Constant())
        {
            w.write(format, field.Name(), *constant);
        }
    }

    static void write_enum(writer& w, TypeDef const& type)
    {
        auto format = R"(
    declare const enum % {
%    }
)";

        auto fields = type.FieldList();
        w.write(format, type.TypeName(), bind_each<write_enum_field>(fields));
    }

    static void write_interface_member_properties(writer& w, TypeDef const& type)
    {
        auto format = R"(        %: %;
)";

        for (auto&& property : type.PropertyList())
        {
            w.write(format,
                property.Name(),
                property.Type().Type()
            );
        }
    }

    static void write_interface_member_methods(writer& w, TypeDef const& type)
    {
        auto format = R"(        %(%): %;
)";

        for (auto&& method : type.MethodList())
        {
            if (!is_put_overload(method) && !is_get_overload(method))
            {
                w.write(format,
                    method.Name(),
                    bind<write_parameters>(method),
                    method.Signature().ReturnType());
            }
        }
    }

    static void write_interface_members(writer& w, TypeDef const& type)
    {
        write_interface_member_properties(w, type);
        write_interface_member_methods(w, type);
    }

    static void write_interface(writer& w, TypeDef const& type)
    {
        auto type_name = type.TypeName();
        auto generics = type.GenericParam();
        auto guard{ w.push_generic_params(generics) };
        auto format = R"(
    interface % {
%    }
)";

        w.write(format,
            type_name,
            bind<write_interface_members>(type));
    }
}
