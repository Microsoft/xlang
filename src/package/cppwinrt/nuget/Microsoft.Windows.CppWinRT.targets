<!--
***********************************************************************************************
Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <CppWinRTVerbosity Condition="'$(CppWinRTVerbosity)' == ''">normal</CppWinRTVerbosity>
        <CppWinRTCommandVerbosity Condition="'$(CppWinRTVerbosity)' == 'high'">-verbose</CppWinRTCommandVerbosity>
        <CppWinRTProjectWinMD>$(OutDir)$(RootNamespace).winmd</CppWinRTProjectWinMD>
        <CppWinRTMergedDir>$(IntDir)Merged\</CppWinRTMergedDir>
        <CppWinRTUnmergedDir>$(IntDir)Unmerged\</CppWinRTUnmergedDir>
        <CppWinRTSkipUnchangedFiles Condition="'$(CppWinRTSkipUnchangedFiles)' == ''">true</CppWinRTSkipUnchangedFiles>
        <CppWinRTUseHardlinksIfPossible Condition="'$(CppWinRTUseHardlinksIfPossible)' == ''">false</CppWinRTUseHardlinksIfPossible>
        <CppWinRTWriteOnlyWhenDifferent Condition="('$(CppWinRTWriteOnlyWhenDifferent)' == '') And (('$(MSBuildToolsVersion)' == 'Current') Or ('$(MSBuildToolsVersion)' &gt;= '15'))">true</CppWinRTWriteOnlyWhenDifferent>
        <CppWinRTWriteOnlyWhenDifferent Condition="'$(CppWinRTWriteOnlyWhenDifferent)' != 'true'">false</CppWinRTWriteOnlyWhenDifferent>
        <CppWinRTPackageDir Condition="'$(CppWinRTPackage)' == 'true' and '$(CppWinRTPackageDir)'==''">$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)))..\..\</CppWinRTPackageDir>
        <CppWinRTPackageDir Condition="'$(CppWinRTPackage)' != 'true' and '$(CppWinRTPackageDir)'==''">$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)))</CppWinRTPackageDir>
        <CppWinRTPath Condition="'$(CppWinRTPackage)' == 'true' and '$(CppWinRTPath)'==''">"$(CppWinRTPackageDir)bin\"</CppWinRTPath>
        <CppWinRTPath Condition="'$(CppWinRTPackage)' != 'true' and '$(CppWinRTPath)'==''">"$(CppWinRTPackageDir)"</CppWinRTPath>
        <XamlLanguage Condition="'$(CppWinRTProjectLanguage)' == 'C++/CX'">C++</XamlLanguage>
        <XamlMetaDataProviderIdl Condition="'$(XamlMetaDataProviderIdl)'== ''">$(GeneratedFilesDir)XamlMetaDataProvider.idl</XamlMetaDataProviderIdl>
        <XamlMetaDataProviderCpp Condition="'$(XamlMetaDataProviderCpp)'== ''">$(GeneratedFilesDir)XamlMetaDataProvider.cpp</XamlMetaDataProviderCpp>

        <GeneratedFilesDir Condition="'$(GeneratedFilesDir)' == ''">$(IntDir)Generated Files\</GeneratedFilesDir>
        <!--Override SDK's uap.props setting to ensure version-matched headers-->
        <CppWinRT_IncludePath>$(GeneratedFilesDir)</CppWinRT_IncludePath>
        <!--TEMP: Override NuGet SDK's erroneous setting in uap.props -->
        <WindowsSDK_MetadataFoundationPath Condition="('$(WindowsSDK_MetadataFoundationPath)'!='') And !Exists($(WindowsSDK_MetadataFoundationPath))">$(WindowsSDK_MetadataPathVersioned)</WindowsSDK_MetadataFoundationPath>

        <GetTargetPathDependsOn>
            $(GetTargetPathDependsOn);CppWinRTCalculateEnabledProjections;CppWinRTGetTargetPath
        </GetTargetPathDependsOn>
        <PrepareForBuildDependsOn>
            $(PrepareForBuildDependsOn);CppWinRTVerifyKitVersion
        </PrepareForBuildDependsOn>
        <!-- Note: Before* targets run before Compute* targets. -->
        <BeforeMidlCompileTargets>
            $(BeforeMidlCompileTargets);CppWinRTAddXamlMetaDataProviderIdl;
        </BeforeMidlCompileTargets>
        <ComputeMidlInputsTargets>
            $(ComputeMidlInputsTargets);CppWinRTComputeXamlGeneratedMidlInputs;CppWinRTSetMidlReferences;
        </ComputeMidlInputsTargets>
        <AfterMidlTargets>
            $(AfterMidlTargets);CppWinRTMergeProjectWinMDInputs
        </AfterMidlTargets>
        <ResolveAssemblyReferencesDependsOn>
            $(ResolveAssemblyReferencesDependsOn);GetCppWinRTProjectWinMDReferences;CppWinRTRemoveStaticLibraries
        </ResolveAssemblyReferencesDependsOn>
        <!-- Note: Before* targets run before Compute* targets. -->
        <BeforeClCompileTargets>
            $(BeforeClCompileTargets);CppWinRTAddXamlMetaDataProviderCpp;CppWinRTMakeProjections;
        </BeforeClCompileTargets>
        <ComputeCompileInputsTargets>
            $(ComputeCompileInputsTargets);CppWinRTComputeXamlGeneratedCompileInputs;CppWinRTHeapEnforcementOptOut;
        </ComputeCompileInputsTargets>
        <MarkupCompilePass1DependsOn>
            $(MarkupCompilePass1DependsOn);CppWinRTAddXamlReferences
        </MarkupCompilePass1DependsOn>
        <MarkupCompilePass2DependsOn>
            $(MarkupCompilePass2DependsOn);CppWinRTSetXamlLocalAssembly
        </MarkupCompilePass2DependsOn>
        <CleanDependsOn>
            $(CleanDependsOn);CppWinRTClean
        </CleanDependsOn>
        <CAExcludePath>
            $(CAExcludePath);$(GeneratedFilesDir);
        </CAExcludePath>

    </PropertyGroup>

    <Target Name="CppWinRTVerifyKitVersion" Condition="'$(CppWinRTOverrideSDKReferences)' != 'true'">
        <PropertyGroup>
            <_CppWinRT_RS4OrGreater>false</_CppWinRT_RS4OrGreater>
            <_CppWinRT_RS4OrGreater Condition="'$(TargetPlatformVersion)' &gt;= '10.0.17134.0'">true</_CppWinRT_RS4OrGreater>
        </PropertyGroup>
        <VCMessage Code="MSB8036" Type="Error" Arguments="10.0.17134.0 (or later)" Condition="$(_CppWinRT_RS4OrGreater) != 'true'" />
    </Target>

    <Target Name="CppWinRTClean">
        <ItemGroup>
            <_FilesToDelete Remove="@(_FilesToDelete)"/>
            <_FilesToDelete Include="$(GeneratedFilesDir)**"/>
            <_FilesToDelete Include="$(OutDir)*.winmd"/>
            <_FilesToDelete Include="$(IntDir)*.winmd"/>
            <_FilesToDelete Include="$(IntDir)*.idl"/>
            <_FilesToDelete Include="$(IntDir)*.rsp"/>
            <_FilesToDelete Include="$(CppWinRTMergedDir)**"/>
            <_FilesToDelete Include="$(CppWinRTUnmergedDir)**"/>
        </ItemGroup>
        <Delete Files="@(_FilesToDelete)"/>
    </Target>

    <Target Name="CppWinRTHeapEnforcementOptOut" Condition="'@(ClCompile)' != ''">
      <ItemGroup Condition="'$(CppWinRTHeapEnforcement)'=='' and ('@(Page)' != '' Or '@(ApplicationDefinition)' != '')">
        <ClCompile>
          <AdditionalOptions>%(ClCompile.AdditionalOptions) /DWINRT_NO_MAKE_DETECTION</AdditionalOptions>
        </ClCompile>
      </ItemGroup>
    </Target>

    <Target Name="CppWinRTCalculateEnabledProjections"
            DependsOnTargets="GetCppWinRTProjectWinMDReferences;GetCppWinRTMdMergeInputs;$(CppWinRTCalculateEnabledProjectionsDependsOn)"
            BeforeTargets="CppWinRTGetTargetPath;CppWinRTMakePlatformProjection;CppWinRTMakeComponentProjection;CppWinRTMakeReferenceProjection"
            Returns="$(CppWinRTEnableComponentProjection);$(CppWinRTEnablePlatformProjection);$(CppWinRTEnableReferenceProjection)">
        <PropertyGroup>
            <!-- For CX projects, turn off the component projection generation-->
            <CppWinRTEnableComponentProjection Condition="'$(CppWinRTEnableComponentProjection)' == '' AND '$(CppWinRTProjectLanguage)' == 'C++/CX' ">false</CppWinRTEnableComponentProjection>
            <CppWinRTEnableComponentProjection Condition="'$(CppWinRTEnableComponentProjection)' == '' AND '$(XamlLanguage)' == 'C++' ">false</CppWinRTEnableComponentProjection>
            <!-- Turn on component projection if not turned off and:
                 1. @(Midl) is not empty or
                 2. project has static library references
            -->
            <CppWinRTEnableComponentProjection Condition="'$(CppWinRTEnableComponentProjection)' == '' AND '@(Midl)' != ''">true</CppWinRTEnableComponentProjection>
            <CppWinRTEnableComponentProjection Condition="'$(CppWinRTEnableComponentProjection)' == '' AND '@(CppWinRTMdMergeInputs)' != ''">true</CppWinRTEnableComponentProjection>
            <CppWinRTEnablePlatformProjection Condition="'$(CppWinRTEnablePlatformProjection)' == ''">true</CppWinRTEnablePlatformProjection>
            <CppWinRTEnableReferenceProjection Condition="'$(CppWinRTEnableReferenceProjection)' == ''">true</CppWinRTEnableReferenceProjection>
        </PropertyGroup>
        <Message Text="CppWinRTEnableComponentProjection: $(CppWinRTEnableComponentProjection)" Importance="$(CppWinRTVerbosity)"/>
        <Message Text="CppWinRTEnablePlatformProjection: $(CppWinRTEnablePlatformProjection)" Importance="$(CppWinRTVerbosity)"/>
        <Message Text="CppWinRTEnableReferenceProjection: $(CppWinRTEnableReferenceProjection)" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <Target Name="CppWinRTGetTargetPath"
            Condition="'$(CppWinRTEnableComponentProjection)' == 'true'"
            Returns="@(TargetPathWithTargetPlatformMoniker)">
        <ItemGroup>
            <TargetPathWithTargetPlatformMoniker Remove="$(TargetPathWithTargetPlatformMoniker)"/>
            <TargetPathWithTargetPlatformMoniker Include="$(CppWinRTProjectWinMD)">
                <TargetPath>$([System.IO.Path]::GetFileName('$(CppWinRTProjectWinMD)'))</TargetPath>
                <Primary>true</Primary>
                <Implementation Condition="'$(TargetExt)' == '.dll'">$(WinMDImplementationPath)$(RootNamespace)$(TargetExt)</Implementation>
                <FileType>winmd</FileType>
                <WinMDFile>true</WinMDFile>
                <ProjectName>$(MSBuildProjectName)</ProjectName>
                <ProjectType>$(ConfigurationType)</ProjectType>
            </TargetPathWithTargetPlatformMoniker>
        </ItemGroup>
        <Message Text="CppWinRTGetTargetPath: @(TargetPathWithTargetPlatformMoniker->'%(FullPath)')" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!-- Static library reference files are merged into the project that
         references it. They shouldn't be included as actual project references.
         Make sure that we've ran the GetCppWinRTProjectWinMDReferences target
         and then remove them. -->
    <Target Name="CppWinRTRemoveStaticLibraries"
            DependsOnTargets="GetCppWinRTProjectWinMDReferences"
            Returns="@(_ResolvedProjectReferencePaths)">
        <ItemGroup>
            <_ResolvedProjectReferencePaths Remove="@(_ResolvedProjectReferencePaths)" Condition="'%(_ResolvedProjectReferencePaths.ProjectType)' == 'StaticLibrary'" />
        </ItemGroup>
    </Target>

    <!--Define platform projection WinMD inputs-->
    <Target Name="GetCppWinRTPlatformWinMDInputs"
            DependsOnTargets="ResolveAssemblyReferences"
            Returns="@(CppWinRTPlatformWinMDInputs)">
        <ItemGroup>
          <_CppWinRTPlatformWinMDInputs Remove="@(_CppWinRTPlatformWinMDInputs)" />
          <_CppWinRTPlatformWinMDInputs Include="$(WindowsSDK_MetadataPathVersioned)\**\*.winmd" />
          <CppWinRTPlatformWinMDInputs Include="@(_CppWinRTPlatformWinMDInputs)">
            <WinMDPath>%(FullPath)</WinMDPath>
          </CppWinRTPlatformWinMDInputs>
        </ItemGroup>
        <Message Text="CppWinRTPlatformWinMDInputs: @(CppWinRTPlatformWinMDInputs->'%(WinMDPath)')" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!--Define platform WinMD references for modern IDL compilation-->
    <Target Name="GetCppWinRTPlatformWinMDReferences"
            DependsOnTargets="ResolveAssemblyReferences;$(GetCppWinRTPlatformWinMDReferencesDependsOn)"
            Returns="@(CppWinRTPlatformWinMDReferences)">
        <ItemGroup>
            <_CppWinRTPlatformWinMDReferences Remove="@(_CppWinRTPlatformWinMDReferences)" />
            <_CppWinRTPlatformWinMDReferences Include="@(ReferencePath)" Condition="'%(ReferencePath.IsSystemReference)' == 'true' and '%(ReferencePath.WinMDFile)' == 'true' and '%(ReferencePath.ReferenceSourceTarget)' == 'ResolveAssemblyReference'" />
            <_CppWinRTPlatformWinMDReferences Condition="'$(CppWinRTOverrideSDKReferences)' != 'true'" Include="$(WindowsSDK_MetadataPathVersioned)\**\Windows.Foundation.FoundationContract.winmd" />
            <_CppWinRTPlatformWinMDReferences Condition="'$(CppWinRTOverrideSDKReferences)' != 'true'" Include="$(WindowsSDK_MetadataPathVersioned)\**\Windows.Foundation.UniversalApiContract.winmd" />
            <_CppWinRTPlatformWinMDReferences Condition="'$(CppWinRTOverrideSDKReferences)' != 'true'" Include="$(WindowsSDK_MetadataPathVersioned)\**\Windows.Networking.Connectivity.WwanContract.winmd" />
            <_CppWinRTPlatformWinMDReferences Include="$(CppWinRTSDKReferences)" />
            <CppWinRTPlatformWinMDReferences Remove="@(CppWinRTPlatformWinMDReferences)"/>
            <CppWinRTPlatformWinMDReferences Include="@(_CppWinRTPlatformWinMDReferences->'%(FullPath)'->Distinct())">
                <WinMDPath>%(FullPath)</WinMDPath>
            </CppWinRTPlatformWinMDReferences>
        </ItemGroup>
        <Message Text="CppWinRTPlatformWinMDReferences: @(CppWinRTPlatformWinMDReferences->'%(WinMDPath)')" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!--Get direct WinMD references (including Nuget packages) for projections, IDL processing, and AppX packaging-->
    <Target Name="GetCppWinRTDirectWinMDReferences"
            DependsOnTargets="ResolveAssemblyReferences;$(GetCppWinRTDirectWinMDReferencesDependsOn)"
            Returns="@(CppWinRTDirectWinMDReferences)">
        <ItemGroup>
            <_CppWinRTDirectWinMDReferences Remove="@(_CppWinRTDirectWinMDReferences)" />
            <_CppWinRTDirectWinMDReferences Include="@(ReferencePath)" Condition="'%(ReferencePath.IsSystemReference)' != 'true' and '%(ReferencePath.WinMDFile)' == 'true' and '%(ReferencePath.ReferenceSourceTarget)' == 'ResolveAssemblyReference'" />
            <CppWinRTDirectWinMDReferences Remove="@(CppWinRTDirectWinMDReferences)"/>
            <CppWinRTDirectWinMDReferences Include="@(_CppWinRTDirectWinMDReferences)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </CppWinRTDirectWinMDReferences>
        </ItemGroup>
        <Message Text="CppWinRTDirectWinMDReferences: @(CppWinRTDirectWinMDReferences->'%(WinMDPath)')" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!--Get direct WinMD project references for projections, IDL processing, and AppX packaging-->
    <Target Name="GetCppWinRTProjectWinMDReferences"
            DependsOnTargets="ResolveProjectReferences;$(GetCppWinRTProjectWinMDReferencesDependsOn)"
            Returns="@(CppWinRTStaticProjectWinMDReferences);@(CppWinRTDynamicProjectWinMDReferences)">
        <ItemGroup>
            <!-- Get static library project references -->
            <_CppWinRTStaticProjectReferences Remove="@(_CppWinRTStaticProjectReferences)"/>
            <_CppWinRTStaticProjectReferences Include="@(_ResolvedProjectReferencePaths)"
                Condition= "'%(_ResolvedProjectReferencePaths.ProjectType)'=='StaticLibrary' AND 
                    '%(_ResolvedProjectReferencePaths.WinMDFile)' == 'true'"/>
            <!--Get dynamic library project references-->
            <_CppWinRTDynamicProjectReferences Remove="@(_CppWinRTDynamicProjectReferences)"/>
            <_CppWinRTDynamicProjectReferences Include="@(_ResolvedProjectReferencePaths)"
                Condition= "'%(_ResolvedProjectReferencePaths.ProjectType)'!='StaticLibrary'  AND '%(_ResolvedProjectReferencePaths.WinMDFile)' == 'true'"/>
        </ItemGroup>
        <ItemGroup>
            <CppWinRTStaticProjectWinMDReferences Remove="@(CppWinRTStaticProjectWinMDReferences)" />
            <CppWinRTStaticProjectWinMDReferences Include="@(_CppWinRTStaticProjectReferences)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </CppWinRTStaticProjectWinMDReferences>
            <CppWinRTDynamicProjectWinMDReferences Remove="@(CppWinRTDynamicProjectWinMDReferences)" />
            <CppWinRTDynamicProjectWinMDReferences Include="@(_CppWinRTDynamicProjectReferences)">
                <WinMDPath>%(FullPath)</WinMDPath>
            </CppWinRTDynamicProjectWinMDReferences>
        </ItemGroup>
        <Message Text="CppWinRTStaticProjectWinMDReferences: @(CppWinRTStaticProjectWinMDReferences->'%(WinMDPath)')" Importance="$(CppWinRTVerbosity)"/>
        <Message Text="CppWinRTDynamicProjectWinMDReferences: @(CppWinRTDynamicProjectWinMDReferences->'%(WinMDPath)')" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!-- Calculates the input files and metadata directories to be passed to MdMerge -->
    <Target Name="GetCppWinRTMdMergeInputs"
                DependsOnTargets="GetCppWinRTPlatformWinMDReferences;GetCppWinRTDirectWinMDReferences;GetCppWinRTProjectWinMDReferences;"
                Returns="@(CppWinRTMdMergeMetadataDirectories);@(CppWinRTMdMergeInputs)">
        <ItemGroup>
            <_MdMergeInputs Remove="@(_MdMergeInputs)"/>
            <_MdMergeInputs Include="@(Midl)">
                <WinMDPath>%(Midl.OutputDirectory)%(Midl.MetadataFileName)</WinMDPath>
                <MdMergeOutputFile>$(CppWinRTProjectWinMD)</MdMergeOutputFile>
            </_MdMergeInputs>
            <!-- Static libraries don't mdmerge other static libraries.
                 Instead they are passed independent inputs for the compoenent projection. -->
            <_MdMergeInputs Include="@(CppWinRTStaticProjectWinMDReferences)" Condition="'$(ConfigurationType)' != 'StaticLibrary'">
                <MdMergeOutputFile>$(CppWinRTProjectWinMD)</MdMergeOutputFile>
            </_MdMergeInputs>
            <_MdMergeReferences Remove="@(_MdMergeReferences)" />
            <_MdMergeReferences Include="@(CppWinRTDirectWinMDReferences)" />
            <_MdMergeReferences Include="@(CppWinRTDynamicProjectWinMDReferences)" />
            <_MdMergeReferences Include="@(CppWinRTPlatformWinMDReferences)" />
            <CppWinRTMdMergeMetadataDirectories Remove="@(CppWinRTMdMergeMetadataDirectories)" />
            <CppWinRTMdMergeMetadataDirectories Include="@(_MdMergeReferences->'%(RelativeDir)'->Distinct())" />
            <CppWinRTMdMergeInputs Remove="@(CppWinRTMdMergeInputs)" />
            <CppWinRTMdMergeInputs Include="@(_MdMergeInputs->'%(WinMDPath)'->Distinct())" />
        </ItemGroup>
        <Message Text="CppWinRTMdMergeInputs: @(CppWinRTMdMergeInputs)" Importance="$(CppWinRTVerbosity)"/>
        <Message Text="CppWinRTMdMergeMetadataDirectories: @(CppWinRTMdMergeMetadataDirectories)" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!-- Adds the XamlMetadataProvider idl to the Midl itemgroup, if building any xaml content -->
    <Target Name="CppWinRTComputeXamlGeneratedMidlInputs"
            DependsOnTargets="$(CppWinRTComputeXamlGeneratedMidlInputsDependsOn)"
            Condition="'@(Page)@(ApplicationDefinition)' != '' and '$(XamlLanguage)' == 'CppWinRT'">
        <PropertyGroup>
            <_DisableReferences>false</_DisableReferences>
            <_DisableReferences Condition="('$(CppWinRTOverrideSDKReferences)' != 'true') and ('$(TargetPlatformVersion)' &lt; '10.0.18310.0')">true</_DisableReferences>
        </PropertyGroup>
        
        <ItemGroup>
            <Midl Include="$(XamlMetaDataProviderIdl)">
                <DisableReferences Condition="$(_DisableReferences)">>true</DisableReferences>
            </Midl>
        </ItemGroup>
    </Target>

    <!-- Adds the XamlMetadataProvider cpp to the ClCompile itemgroup, if building any xaml content -->
    <Target Name="CppWinRTComputeXamlGeneratedCompileInputs"
            DependsOnTargets="$(CppWinRTComputeXamlGeneratedCompileInputsDependsOn)"
            Condition="'@(Page)@(ApplicationDefinition)' != '' and '$(XamlLanguage)' == 'CppWinRT'">
        <ItemGroup>
            <ClCompile Include="$(XamlMetaDataProviderCpp)" Condition="'$(CppWinRTOptimized)'=='true'">
                <CompilerIteration>XamlGenerated</CompilerIteration>
            </ClCompile>
        </ItemGroup>
    </Target>

    <!--If building any Xaml content, write XamlMetaDataProvider idl file -->
    <Target Name="CppWinRTAddXamlMetaDataProviderIdl"
            Condition="'@(Page)@(ApplicationDefinition)' != '' and '$(XamlLanguage)' == 'CppWinRT'">
        <PropertyGroup>
            <_DisableReferences>false</_DisableReferences>
            <_DisableReferences Condition="('$(CppWinRTOverrideSDKReferences)' != 'true') and ('$(TargetPlatformVersion)' &lt; '10.0.18310.0')">true</_DisableReferences>
            <FullXamlMetadataProviderAttribute Condition="$(XamlCodeGenerationControlFlags.Contains('FullXamlMetadataProvider'))">[Windows.UI.Xaml.Markup.FullXamlMetadataProvider] </FullXamlMetadataProviderAttribute>
            <XamlMarkupIdlImport Condition="$(_DisableReferences)">import "Windows.UI.Xaml.Markup.idl"%3b</XamlMarkupIdlImport>
            <XamlMetaDataProviderIdlLines>
// This file is generated by the build to support Xaml apps
$(XamlMarkupIdlImport)
namespace $(RootNamespace)
{
    $(FullXamlMetadataProviderAttribute)runtimeclass XamlMetaDataProvider : [default] Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        XamlMetaDataProvider()%3b
    }
}
</XamlMetaDataProviderIdlLines>
        </PropertyGroup>
        <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(XamlMetaDataProviderIdl)" Lines="$(XamlMetaDataProviderIdlLines)"
            ContinueOnError="true" Overwrite="true" />
        <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(XamlMetaDataProviderIdl)" Lines="$(XamlMetaDataProviderIdlLines)"
            ContinueOnError="true" Overwrite="true"
            WriteOnlyWhenDifferent="true" />
    </Target>

    <!--If building any Xaml content, write XamlMetaDataProvider cpp file -->
    <Target Name="CppWinRTAddXamlMetaDataProviderCpp"
            Condition="'@(Page)@(ApplicationDefinition)' != '' and '$(XamlLanguage)' == 'CppWinRT'">
        <PropertyGroup>
            <XamlMetaDataProviderCpp>
                $(GeneratedFilesDir)XamlMetaDataProvider.cpp
            </XamlMetaDataProviderCpp>
            <_PCH>@(ClCompile->Metadata('PrecompiledHeaderFile')->Distinct())</_PCH>
            <XamlMetaDataProviderPch Condition="'$(_PCH)'!=''">#include "$(_PCH)"</XamlMetaDataProviderPch>
            <XamlMetaDataProviderCppLines>
// This file is generated by the build to support Xaml apps
$(XamlMetaDataProviderPch)
#include "XamlMetaDataProvider.h"
#include "XamlMetaDataProvider.g.cpp"
</XamlMetaDataProviderCppLines>
        </PropertyGroup>
        <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(XamlMetaDataProviderCpp)" Lines="$(XamlMetaDataProviderCppLines)"
            ContinueOnError="true" Overwrite="true" />
        <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(XamlMetaDataProviderCpp)" Lines="$(XamlMetaDataProviderCppLines)"
            ContinueOnError="true" Overwrite="true"
            WriteOnlyWhenDifferent="true" />
    </Target>

    <!--Insert Midl /references to Platform WinMDs, library reference WinMDs, and direct reference WinMDs-->
    <Target Name="CppWinRTSetMidlReferences"
            DependsOnTargets="GetCppWinRTPlatformWinMDReferences;GetCppWinRTDirectWinMDReferences;GetCppWinRTProjectWinMDReferences;$(CppWinRTSetMidlReferencesDependsOn)">
        <ItemGroup Condition="'$(CppWinRTModernIDL)' != 'false'">
            <_MidlReferences Remove="@(_MidlReferences)"/>
            <_MidlReferences Include="@(CppWinRTDirectWinMDReferences)"/>
            <_MidlReferences Include="@(CppWinRTStaticProjectWinMDReferences)"/>
            <_MidlReferences Include="@(CppWinRTDynamicProjectWinMDReferences)"/>
            <_MidlReferences Include="@(CppWinRTPlatformWinMDReferences)"/>
            <_MidlReferencesDistinct Remove="@(_MidlReferencesDistinct)" />
            <_MidlReferencesDistinct Include="@(_MidlReferences->'%(WinMDPath)'->Distinct())" />
            <Midl Condition="'%(Midl.DisableReferences)'==''">
                <AdditionalOptions>%(Midl.AdditionalOptions) %40"$(IntDir)midlrt.rsp"</AdditionalOptions>
            </Midl>
        </ItemGroup>
        <ItemGroup>
            <Midl Condition="'%(Midl.AdditionalMetadataDirectories)'==''">
                <AdditionalMetadataDirectories Condition="'$(WindowsSDK_MetadataFoundationPath)' != ''">%(Midl.AdditionalMetadataDirectories);$(WindowsSDK_MetadataFoundationPath);</AdditionalMetadataDirectories>
                <AdditionalMetadataDirectories Condition="'$(WindowsSDK_MetadataFoundationPath)' == ''">%(Midl.AdditionalMetadataDirectories);$(WindowsSDK_MetadataPath);</AdditionalMetadataDirectories>
            </Midl>
        </ItemGroup>
      <PropertyGroup>
        <_MidlrtParameters>@(_MidlReferencesDistinct->'/reference &quot;%(WinMDPath)&quot;','&#x0d;&#x0a;')</_MidlrtParameters>
      </PropertyGroup>
      <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
          File="$(IntDir)midlrt.rsp" Lines="$(_MidlrtParameters)"
          ContinueOnError="true" Overwrite="true" />
      <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
          File="$(IntDir)midlrt.rsp" Lines="$(_MidlrtParameters)"
          ContinueOnError="true" Overwrite="true"
          WriteOnlyWhenDifferent="true" />
      <Message Text="CppWinRTMidlReferences: @(_MidlReferences->'%(WinMDPath)')" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!--Merge project-generated WinMDs and project-referenced static library WinMDs into project WinMD-->
    <Target Name="CppWinRTMergeProjectWinMDInputs"
            DependsOnTargets="Midl;GetCppWinRTMdMergeInputs;$(CppWinRTMergeProjectWinMDInputsDependsOn)"
            Inputs="@(CppWinRTMdMergeInputs)"
            Outputs="$(CppWinRTProjectWinMD)">
        <PropertyGroup>
            <!--Note: CppWinRTNamespaceMergeDepth supersedes CppWinRTMergeDepth-->
            <_MdMergeDepth Condition="'$(CppWinRTNamespaceMergeDepth)' != ''">-n:$(CppWinRTNamespaceMergeDepth)</_MdMergeDepth>
            <_MdMergeDepth Condition="'$(_MdMergeDepth)' == ''">$(CppWinRTMergeDepth)</_MdMergeDepth>
            <_MdMergeDepth Condition="'$(_MdMergeDepth)' == '' And '$(CppWinRTRootNamespaceAutoMerge)' == 'true'">-n:$(RootNamespace.Split('.').length)</_MdMergeDepth>
            <_MdMergeDepth Condition="'$(_MdMergeDepth)' == '' And ('@(Page)' != '' Or '@(ApplicationDefinition)' != '')">-n:1</_MdMergeDepth>
            <_MdMergeCommand>$(MdMergePath)mdmerge %40"$(IntDir)mdmerge.rsp"</_MdMergeCommand>
        </PropertyGroup>
        <PropertyGroup>
            <!-- mdmerge.exe wants the folders to not have a trailing \ -->
            <_MdMergeParameters>-v @(CppWinRTMdMergeMetadataDirectories->'-metadata_dir &quot;%(RelativeDir).&quot;', '&#x0d;&#x0a;')</_MdMergeParameters>
            <_MdMergeParameters>$(_MdMergeParameters) @(CppWinRTMdMergeInputs->'-i &quot;%(Identity)&quot;', '&#x0d;&#x0a;')</_MdMergeParameters>
            <_MdMergeParameters>$(_MdMergeParameters) -o &quot;$(CppWinRTMergedDir.TrimEnd('\'))&quot; -partial $(_MdMergeDepth)</_MdMergeParameters>
        </PropertyGroup>
        <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(IntDir)mdmerge.rsp" Lines="$(_MdMergeParameters)"
            ContinueOnError="true" Overwrite="true" />
        <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(IntDir)mdmerge.rsp" Lines="$(_MdMergeParameters)"
            ContinueOnError="true" Overwrite="true"
            WriteOnlyWhenDifferent="true" />
        <MakeDir Directories="$(CppWinRTUnmergedDir);$(CppWinRTMergedDir)" />
        <Message Text="$(_MdMergeCommand)" Importance="$(CppWinRTVerbosity)"/>
        <Exec Command="$(_MdMergeCommand)" />
        <ItemGroup>
            <_MdMergedOutput Remove="@(_MdMergedOutput)"/>
            <_MdMergedOutput Include="$(CppWinRTMergedDir)*.winmd"/>
        </ItemGroup>
        <Copy UseHardlinksIfPossible="$(CppWinRTUseHardlinksIfPossible)"
            SkipUnchangedFiles="$(CppWinRTSkipUnchangedFiles)"
            SourceFiles="@(_MdMergedOutput)"
            DestinationFiles="@(_MdMergedOutput->'$(OutDir)%(Filename)%(Extension)')" />
        <Message Text="CppWinRTMdMerge output: @(MdMergeOutput)" Importance="$(CppWinRTVerbosity)"/>
    </Target>

    <!-- Build the platform projection from the winmds that sip with the platform in the Windows SDK -->
    <Target Name="CppWinRTMakePlatformProjection"
            Condition="'$(CppWinRTEnablePlatformProjection)' == 'true' AND '$(CppWinRTOverrideSDKReferences)' != 'true'"
            DependsOnTargets="GetCppWinRTPlatformWinMDInputs;$(CppWinRTMakePlatformProjectionDependsOn)"
            Inputs="@(CppWinRTPlatformWinMDInputs)"
            Outputs="$(GeneratedFilesDir)winrt\base.h">
        <PropertyGroup>
            <CppWinRTCommand>$(CppWinRTPath)cppwinrt %40"$(IntDir)cppwinrt_plat.rsp"</CppWinRTCommand>
        </PropertyGroup>
        <ItemGroup>
            <_CppwinrtInputs Remove="@(_CppwinrtInputs)"/>
            <_CppwinrtInputs Include="@(CppWinRTPlatformWinMDInputs)"/>
        </ItemGroup>
        <PropertyGroup>
            <_CppwinrtParameters>$(CppWinRTCommandVerbosity) $(CppWinRTParameters)</_CppwinrtParameters>
            <_CppwinrtParameters>$(_CppwinrtParameters) @(_CppwinrtInputs->'-in &quot;%(WinMDPath)&quot;', '&#x0d;&#x0a;')</_CppwinrtParameters>
            <_CppwinrtParameters>$(_CppwinrtParameters) -out &quot;$(GeneratedFilesDir).&quot;</_CppwinrtParameters>
        </PropertyGroup>
        <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(IntDir)cppwinrt_plat.rsp" Lines="$(_CppwinrtParameters)"
            ContinueOnError="true" Overwrite="true" />
        <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(IntDir)cppwinrt_plat.rsp" Lines="$(_CppwinrtParameters)"
            ContinueOnError="true" Overwrite="true"
            WriteOnlyWhenDifferent="true" />
        <Message Text="$(CppWinRTCommand)" Importance="$(CppWinRTVerbosity)"/>
        <Exec Command="$(CppWinRTCommand)" />
    </Target>

  <!--Build reference projection from WinMD project references and dynamic library project references-->
  <Target Name="CppWinRTMakeReferenceProjection"
          Condition="'$(CppWinRTEnableReferenceProjection)' == 'true'"
          DependsOnTargets="GetCppWinRTProjectWinMDReferences;GetCppWinRTPlatformWinMDReferences;GetCppWinRTDirectWinMDReferences;$(CppWinRTMakeReferenceProjectionDependsOn)"
          Inputs="@(CppWinRTDirectWinMDReferences);@(CppWinRTDynamicProjectWinMDReferences);@(CppWinRTPlatformWinMDReferences)"
          Outputs="@(CppWinRTDirectWinMDReferences->'$(GeneratedFilesDir)winrt\%(Filename).h');@(CppWinRTDynamicProjectWinMDReferences->'$(GeneratedFilesDir)winrt\%(Filename).h')">
    <PropertyGroup>
      <CppWinRTCommand>$(CppWinRTPath)cppwinrt %40"$(IntDir)cppwinrt_ref.rsp"</CppWinRTCommand>
    </PropertyGroup>
    <ItemGroup>
      <_CppwinrtRefInputs Remove="@(_CppwinrtRefInputs)"/>
      <_CppwinrtRefInputs Include="@(CppWinRTDirectWinMDReferences)"/>
      <_CppwinrtRefInputs Include="@(CppWinRTDynamicProjectWinMDReferences)"/>
      <_CppwinrtRefRefs Remove="@(_CppwinrtRefRefs)"/>
      <_CppwinrtRefRefs Include="@(CppWinRTPlatformWinMDReferences)"/>
    </ItemGroup>
    <PropertyGroup>
      <_CppwinrtParameters>$(CppWinRTCommandVerbosity) $(CppWinRTParameters)</_CppwinrtParameters>
      <_CppwinrtParameters>$(_CppwinrtParameters) @(_CppwinrtRefInputs->'-in &quot;%(WinMDPath)&quot;', '&#x0d;&#x0a;')</_CppwinrtParameters>
      <_CppwinrtParameters>$(_CppwinrtParameters) @(_CppwinrtRefRefs->'-ref &quot;%(WinMDPath)&quot;', '&#x0d;&#x0a;')</_CppwinrtParameters>
      <_CppwinrtParameters>$(_CppwinrtParameters) -out &quot;$(GeneratedFilesDir).&quot;</_CppwinrtParameters>
    </PropertyGroup>
    <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
        File="$(IntDir)cppwinrt_ref.rsp" Lines="$(_CppwinrtParameters)"
        ContinueOnError="true" Overwrite="true" />
    <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
        File="$(IntDir)cppwinrt_ref.rsp" Lines="$(_CppwinrtParameters)"
        ContinueOnError="true" Overwrite="true"
        WriteOnlyWhenDifferent="true" />
    <Message Text="$(CppWinRTCommand)" Importance="$(CppWinRTVerbosity)"/>
    <Exec Command="$(CppWinRTCommand)" />
  </Target>

    <!--Build component projection from project WinMD file and static library project references-->
    <Target Name="CppWinRTMakeComponentProjection"
            Condition="'$(CppWinRTEnableComponentProjection)' == 'true'"
            DependsOnTargets="GetCppWinRTProjectWinMDReferences;GetCppWinRTPlatformWinMDReferences;GetCppWinRTDirectWinMDReferences;$(CppWinRTMakeComponentProjectionDependsOn)"
            Inputs="@(Midl->'%(MetadataFileName)');@(CppWinRTStaticProjectWinMDReferences)"
            Outputs="$(GeneratedFilesDir)winrt\$(RootNamespace).h">
        <PropertyGroup>
            <_PCH>@(ClCompile->Metadata('PrecompiledHeaderFile')->Distinct())</_PCH>
        </PropertyGroup>
        <Error Condition="('$(CppWinRTOverrideSDKReferences)' != 'true') and ('$(TargetPlatformVersion)' &lt; '10.0.17709.0') and ('$(_PCH)' != 'pch.h')"
            Text="Please retarget to 10.0.17709.0 or later, or rename your PCH to 'pch.h'."/>
        <PropertyGroup Condition="('$(CppWinRTOverrideSDKReferences)' == 'true') or ('$(TargetPlatformVersion)' &gt; '10.0.17708.0')">
            <CppWinRTUsePrefixes Condition="'$(CppWinRTUsePrefixes)' == ''">true</CppWinRTUsePrefixes>
            <CppWinRTPrecompiledHeader Condition="'$(CppWinRTPrecompiledHeader)' == ''">$(_PCH)</CppWinRTPrecompiledHeader>
        </PropertyGroup>
        <PropertyGroup>
            <CppWinRTCommandUsePrefixes Condition="'$(CppWinRTUsePrefixes)' == 'true'">-prefix</CppWinRTCommandUsePrefixes>
            <CppWinRTCommandPrecompiledHeader Condition="'$(CppWinRTPrecompiledHeader)' != ''">-pch $(CppWinRTPrecompiledHeader)</CppWinRTCommandPrecompiledHeader>
            <CppWinRTCommand>$(CppWinRTPath)cppwinrt %40"$(IntDir)cppwinrt_comp.rsp"</CppWinRTCommand>
        </PropertyGroup>
        <ItemGroup>
            <!-- use the output from MdMerge directly to generate the component projection. -->
            <_MdMergedOutput Remove="@(_MdMergedOutput)"/>
            <_MdMergedOutput Include="$(CppWinRTMergedDir)*.winmd"/>
            <_CppwinrtCompInputs Remove="@(_CppwinrtCompInputs)"/>
            <_CppwinrtCompInputs Include="@(_MdMergedOutput)">
                <WinMDPath>@(_MdMergedOutput->'%(FullPath)')</WinMDPath>
            </_CppwinrtCompInputs>
            <!-- If this is a static library with static library references,
                 pass the individual static library references to cppwinrt.exe 
                 for the component projection as they are not merged.-->
            <_CppwinrtCompInputs Include="@(CppWinRTStaticProjectWinMDReferences)" Condition="'$(ConfigurationType)' == 'StaticLibrary'">
                <WinMDPath>%(CppWinRTStaticProjectWinMDReferences.FullPath)</WinMDPath>
            </_CppwinrtCompInputs>
            <_CppwinrtCompRefs Remove="@(_CppwinrtCompRefs)"/>
            <_CppwinrtCompRefs Include="@(CppWinRTDirectWinMDReferences)"/>
            <_CppwinrtCompRefs Include="@(CppWinRTDynamicProjectWinMDReferences)"/>
            <_CppwinrtCompRefs Include="@(CppWinRTPlatformWinMDReferences)"/>
        </ItemGroup>
        <PropertyGroup>
            <_CppwinrtParameters>$(CppWinRTCommandVerbosity) $(CppWinRTParameters) -overwrite -name $(RootNamespace) $(CppWinRTCommandPrecompiledHeader) $(CppWinRTCommandUsePrefixes) -comp &quot;$(GeneratedFilesDir)sources&quot;</_CppwinrtParameters>
            <_CppwinrtParameters Condition="'$(CppWinRTOptimized)'=='true'">$(_CppwinrtParameters) -opt</_CppwinrtParameters>
            <_CppwinrtParameters>$(_CppwinrtParameters) @(_CppwinrtCompInputs->'-in &quot;%(WinMDPath)&quot;', '&#x0d;&#x0a;')</_CppwinrtParameters>
            <_CppwinrtParameters>$(_CppwinrtParameters) @(_CppwinrtCompRefs->'-ref &quot;%(WinMDPath)&quot;', '&#x0d;&#x0a;')</_CppwinrtParameters>
            <_CppwinrtParameters>$(_CppwinrtParameters) -out &quot;$(GeneratedFilesDir).&quot;</_CppwinrtParameters>
        </PropertyGroup>
        <WriteLinesToFile Condition="!$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(IntDir)cppwinrt_comp.rsp" Lines="$(_CppwinrtParameters)"
            ContinueOnError="true" Overwrite="true" />
        <WriteLinesToFile Condition="$(CppWinRTWriteOnlyWhenDifferent)"
            File="$(IntDir)cppwinrt_comp.rsp" Lines="$(_CppwinrtParameters)"
            ContinueOnError="true" Overwrite="true"
            WriteOnlyWhenDifferent="true" />
        <Message Text="$(CppWinRTCommand)" Importance="$(CppWinRTVerbosity)" Condition="'@(_CppwinrtCompInputs)' != ''"/>
        <Exec Command="$(CppWinRTCommand)" Condition="'@(_CppwinrtCompInputs)' != ''"/>
    </Target>

    <!-- Main target that generates all the CppWinRT projections. -->
    <Target Name="CppWinRTMakeProjections" DependsOnTargets="CppWinRTCalculateEnabledProjections;CppWinRTMakePlatformProjection;CppWinRTMakeReferenceProjection;CppWinRTMakeComponentProjection;$(CppWinRTMakeProjectionsDependsOn)" />

    <!--Add references to all merged project WinMD files for Xaml Compiler-->
    <Target Name="CppWinRTAddXamlReferences" DependsOnTargets="$(CppWinRTAddXamlReferencesDependsOn)">
        <ItemGroup>
            <XamlReferencesToCompile Include="$(OutDir)*.winmd" />
        </ItemGroup>
    </Target>

    <!--Clear merged assembly and set local assembly for Xaml Compiler.
        (Note: this can be removed when CppWinRT references are removed from the Xaml targets file.)-->
    <Target Name="CppWinRTSetXamlLocalAssembly" DependsOnTargets="$(CppWinRTSetXamlLocalAssemblyDependsOn)">
        <PropertyGroup>
            <CppWinRTMetadataAssembly></CppWinRTMetadataAssembly>
            <XamlLocalAssembly>$(CppWinRTProjectWinMD)</XamlLocalAssembly>
        </PropertyGroup>
    </Target>

    <!-- Fast ABI component support -->
    <PropertyGroup Condition="'$(CppWinRTFastAbi)'=='true'">
        <CppWinRTParameters>$(CppWinRTParameters) -fastabi</CppWinRTParameters>
    </PropertyGroup>
    <ItemDefinitionGroup Condition="'$(CppWinRTFastAbi)'=='true'">
        <Link>
            <AdditionalDependencies>%(AdditionalDependencies);$(CppWinRTPackageDir)build\native\lib\$(Platform)\cppwinrt_fast_forwarder.lib</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>

</Project>
