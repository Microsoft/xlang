// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#ifndef WINRT_Component_Composable_0_H
#define WINRT_Component_Composable_0_H
namespace winrt::Component::Composable
{
    struct IBase;
    struct IBaseFactory;
    struct IDerived;
    struct Base;
    struct Derived;
}
namespace winrt::impl
{
    template <> struct category<Component::Composable::IBase>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Composable::IBaseFactory>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Composable::IDerived>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Composable::Base>
    {
        using type = class_category;
    };
    template <> struct category<Component::Composable::Derived>
    {
        using type = class_category;
    };
    template <> struct name<Component::Composable::IBase>
    {
        static constexpr auto & value{ L"Component.Composable.IBase" };
    };
    template <> struct name<Component::Composable::IBaseFactory>
    {
        static constexpr auto & value{ L"Component.Composable.IBaseFactory" };
    };
    template <> struct name<Component::Composable::IDerived>
    {
        static constexpr auto & value{ L"Component.Composable.IDerived" };
    };
    template <> struct name<Component::Composable::Base>
    {
        static constexpr auto & value{ L"Component.Composable.Base" };
    };
    template <> struct name<Component::Composable::Derived>
    {
        static constexpr auto & value{ L"Component.Composable.Derived" };
    };
    template <> struct guid_storage<Component::Composable::IBase>
    {
        static constexpr guid value{ 0x0457DD64,0x2AA4,0x5AE5,{ 0xBA,0x6C,0x09,0x03,0x11,0xCB,0x4F,0x2E } };
    };
    template <> struct guid_storage<Component::Composable::IBaseFactory>
    {
        static constexpr guid value{ 0x63B6019B,0x8826,0x511F,{ 0xB3,0xE7,0x6E,0xEB,0x92,0xB8,0x90,0xC8 } };
    };
    template <> struct guid_storage<Component::Composable::IDerived>
    {
        static constexpr guid value{ 0x9031F275,0x1A12,0x504A,{ 0x9F,0x6E,0xBA,0x1F,0x9F,0x37,0x92,0xD5 } };
    };
    template <> struct default_interface<Component::Composable::Base>
    {
        using type = Component::Composable::IBase;
    };
    template <> struct default_interface<Component::Composable::Derived>
    {
        using type = Component::Composable::IDerived;
    };
    template <> struct abi<Component::Composable::IBase>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL BaseMethod(void**) noexcept = 0;
        };
    };
    template <> struct abi<Component::Composable::IBaseFactory>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Component::Composable::IDerived>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL DerivedMethod(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Component_Composable_IBase
    {
        hstring BaseMethod() const;
    };
    template <> struct consume<Component::Composable::IBase>
    {
        template <typename D> using type = consume_Component_Composable_IBase<D>;
    };
    template <typename D>
    struct consume_Component_Composable_IBaseFactory
    {
        Component::Composable::Base CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Component::Composable::IBaseFactory>
    {
        template <typename D> using type = consume_Component_Composable_IBaseFactory<D>;
    };
    template <typename D>
    struct consume_Component_Composable_IDerived
    {
        hstring DerivedMethod() const;
    };
    template <> struct consume<Component::Composable::IDerived>
    {
        template <typename D> using type = consume_Component_Composable_IDerived<D>;
    };
}
#endif
