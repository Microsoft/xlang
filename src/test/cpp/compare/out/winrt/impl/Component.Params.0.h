// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/base.h"
namespace winrt::Windows::Foundation
{
    struct IAsyncAction;
    template <typename T> struct IReference;
}
namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct IIterable;
    template <typename K, typename V> struct IMapView;
    template <typename K, typename V> struct IMap;
    template <typename T> struct IVectorView;
    template <typename T> struct IVector;
}
namespace winrt::Component::Params
{
    struct IClass;
    struct Class;
}
namespace winrt::impl
{
    template <> struct category<Component::Params::IClass>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Params::Class>
    {
        using type = class_category;
    };
    template <> struct name<Component::Params::IClass>
    {
        static constexpr auto & value{ L"Component.Params.IClass" };
    };
    template <> struct name<Component::Params::Class>
    {
        static constexpr auto & value{ L"Component.Params.Class" };
    };
    template <> struct guid_storage<Component::Params::IClass>
    {
        static constexpr guid value{ 0x4187519D,0x11A0,0x5E45,{ 0xB9,0xC3,0xA4,0xE9,0x36,0x2D,0x11,0x0E } };
    };
    template <> struct default_interface<Component::Params::Class>
    {
        using type = Component::Params::IClass;
    };
    template <> struct abi<Component::Params::IClass>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL SyncCall(void*, void*, void*, void*, void*, void*, void*) noexcept = 0;
            virtual int32_t WINRT_CALL NotSyncCall(void*, void*, void*, void*, void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Component_Params_IClass
    {
        void SyncCall(param::hstring const& a, optional<int32_t> const& b, param::iterable<int32_t> const& c, param::vector_view<int32_t> const& d, param::map_view<int32_t, int32_t> const& e, param::vector<int32_t> const& f, param::map<int32_t, int32_t> const& g) const;
        Windows::Foundation::IAsyncAction NotSyncCall(param::hstring const& a, optional<int32_t> const& b, param::iterable<int32_t> const& c, param::vector_view<int32_t> const& d, param::map_view<int32_t, int32_t> const& e, param::vector<int32_t> const& f, param::map<int32_t, int32_t> const& g) const;
    };
    template <> struct consume<Component::Params::IClass>
    {
        template <typename D> using type = consume_Component_Params_IClass<D>;
    };
}
