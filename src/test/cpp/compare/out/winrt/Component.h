// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#ifndef WINRT_Component_H
#define WINRT_Component_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.000000.0"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Component.2.h"
namespace winrt::impl
{
    template <typename D> hstring consume_Component_INotExclusive<D>::NotExclusive() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::INotExclusive)->NotExclusive(&result));
        return { result, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, Component::INotExclusive> : produce_base<D, Component::INotExclusive>
    {
        int32_t WINRT_CALL NotExclusive(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().NotExclusive());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
}
namespace winrt::Component
{
}
namespace std
{
    template<> struct hash<winrt::Component::INotExclusive> : winrt::impl::hash_base<winrt::Component::INotExclusive> {};
}
#endif
