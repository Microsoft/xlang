// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/impl/Component.Fast.2.h"
#include "winrt/impl/Component.2.h"
namespace winrt::impl
{
    template <typename D> hstring consume_Component_INotExclusive<D>::NotExclusive() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::INotExclusive)->NotExclusive(&result));
        return { construct_from_abi, result };
    }
    template <typename D> int32_t consume_Component_IResult<D>::GetInt32() const
    {
        int32_t result;
        check_hresult(WINRT_SHIM(Component::IResult)->GetInt32(&result));
        return result;
    }
    template <typename D> hstring consume_Component_IResult<D>::GetString() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::IResult)->GetString(&result));
        return { construct_from_abi, result };
    }
    template <typename D> Component::Fast::FastClass consume_Component_IResult<D>::GetFastClass() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::IResult)->GetFastClass(&result));
        return { construct_from_abi, result };
    }
    template <typename D> Component::Fast::SlowClass consume_Component_IResult<D>::GetSlowClass() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::IResult)->GetSlowClass(&result));
        return { construct_from_abi, result };
    }
    template <typename D> Component::INotExclusive consume_Component_IResult<D>::GetInterface() const
    {
        void* result;
        check_hresult(WINRT_SHIM(Component::IResult)->GetInterface(&result));
        return { construct_from_abi, result };
    }
    template <typename D>
    struct produce<D, Component::INotExclusive> : produce_base<D, Component::INotExclusive>
    {
        int32_t WINRT_CALL NotExclusive(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().NotExclusive());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
    template <typename D>
    struct produce<D, Component::IResult> : produce_base<D, Component::IResult>
    {
        int32_t WINRT_CALL GetInt32(int32_t* result) noexcept final
        {
            try
            {
                typename D::abi_guard guard(this->shim());
                *result = detach_from<int32_t>(this->shim().GetInt32());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL GetString(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<hstring>(this->shim().GetString());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL GetFastClass(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<Component::Fast::FastClass>(this->shim().GetFastClass());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL GetSlowClass(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<Component::Fast::SlowClass>(this->shim().GetSlowClass());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
        int32_t WINRT_CALL GetInterface(void** result) noexcept final
        {
            try
            {
                *result = nullptr;
                typename D::abi_guard guard(this->shim());
                *result = detach_from<Component::INotExclusive>(this->shim().GetInterface());
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
}
namespace winrt::Component
{
    inline Result::Result() :
        Result(impl::call_factory<Result>([](auto&& f) { return f.template ActivateInstance<Result>(); }))
    {
    }
}
namespace std
{
    template<> struct hash<winrt::Component::INotExclusive> : winrt::impl::hash_base<winrt::Component::INotExclusive> {};
    template<> struct hash<winrt::Component::IResult> : winrt::impl::hash_base<winrt::Component::IResult> {};
    template<> struct hash<winrt::Component::Result> : winrt::impl::hash_base<winrt::Component::Result> {};
}
