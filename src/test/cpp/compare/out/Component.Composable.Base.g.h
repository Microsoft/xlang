// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/Component.Composable.h"
namespace winrt::Component::Composable::implementation
{
    template <typename D, typename... I>
    struct WINRT_EBO Base_base : implements<D, Component::Composable::IBase, composable, I...>
    {
        using base_type = Base_base;
        using class_type = Component::Composable::Base;
        using implements_type = typename Base_base::implements_type;
        using implements_type::implements_type;
        
        operator impl::producer_ref<class_type> const() const noexcept
        {
            return { to_abi<default_interface<class_type>>(this) };
        }
        hstring GetRuntimeClassName() const
        {
            return L"Component.Composable.Base";
        }
    };
}
namespace winrt::Component::Composable::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO BaseT : implements<D, Windows::Foundation::IActivationFactory, Component::Composable::IBaseFactory, I...>
    {
        using instance_type = Component::Composable::Base;

        hstring GetRuntimeClassName() const
        {
            return L"Component.Composable.Base";
        }
        Component::Composable::Base CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface)
        {
            return impl::composable_factory<T>::template CreateInstance<Component::Composable::Base>(baseInterface, innerInterface);
        }
        [[noreturn]] Windows::Foundation::IInspectable ActivateInstance() const
        {
            throw hresult_not_implemented();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_BASE_XAML_G_H) || __has_include("Component.Composable.Base.xaml.g.h")
#include "Component.Composable.Base.xaml.g.h"
#else

namespace winrt::Component::Composable::implementation
{
    template <typename D, typename... I>
    using BaseT = Base_base<D, I...>;
}

#endif
