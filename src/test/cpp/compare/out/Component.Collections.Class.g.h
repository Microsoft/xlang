// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/Component.Collections.h"
#include "winrt/Windows.Foundation.Collections.h"
namespace winrt::Component::Collections::implementation
{
    template <typename D, typename... I>
    struct WINRT_EBO Class_base : implements<D, Component::Collections::IClass, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, int32_t>>, Windows::Foundation::Collections::IMap<hstring, int32_t>, Windows::Foundation::Collections::IObservableMap<hstring, int32_t>, I...>
    {
        using base_type = Class_base;
        using class_type = Component::Collections::Class;
        using implements_type = typename Class_base::implements_type;
        using implements_type::implements_type;
        
        operator impl::producer_ref<class_type> const() const noexcept
        {
            return { to_abi<default_interface<class_type>>(this) };
        }
        hstring GetRuntimeClassName() const
        {
            return L"Component.Collections.Class";
        }
    };
}
namespace winrt::Component::Collections::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO ClassT : implements<D, Windows::Foundation::IActivationFactory, Component::Collections::IClassStatics, I...>
    {
        using instance_type = Component::Collections::Class;

        hstring GetRuntimeClassName() const
        {
            return L"Component.Collections.Class";
        }
        Windows::Foundation::IInspectable ActivateInstance() const
        {
            return make<T>();
        }
        Windows::Foundation::Collections::IIterable<hstring> Iterable()
        {
            return T::Iterable();
        }
        Windows::Foundation::Collections::IVectorView<hstring> VectorView()
        {
            return T::VectorView();
        }
        Windows::Foundation::Collections::IVector<hstring> Vector()
        {
            return T::Vector();
        }
        Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, int32_t>> IterablePair()
        {
            return T::IterablePair();
        }
        Windows::Foundation::Collections::IMapView<hstring, int32_t> MapView()
        {
            return T::MapView();
        }
        Windows::Foundation::Collections::IMap<hstring, int32_t> Map()
        {
            return T::Map();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CLASS_XAML_G_H) || __has_include("Component.Collections.Class.xaml.g.h")
#include "Component.Collections.Class.xaml.g.h"
#else

namespace winrt::Component::Collections::implementation
{
    template <typename D, typename... I>
    using ClassT = Class_base<D, I...>;
}

#endif
