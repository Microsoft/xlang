// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/Component.h"
namespace winrt::Component::implementation
{
    template <typename D, typename... I>
    struct WINRT_EBO Result_base : implements<D, Component::IResult, I...>
    {
        using base_type = Result_base;
        using class_type = Component::Result;
        using implements_type = typename Result_base::implements_type;
        using implements_type::implements_type;
        
        operator impl::producer_ref<class_type> const() const noexcept
        {
            return { to_abi<default_interface<class_type>>(this) };
        }

        hstring GetRuntimeClassName() const
        {
            return L"Component.Result";
        }
    };
}
namespace winrt::Component::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO ResultT : implements<D, Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = Component::Result;

        hstring GetRuntimeClassName() const
        {
            return L"Component.Result";
        }
        Windows::Foundation::IInspectable ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_RESULT_XAML_G_H) || __has_include("Component.Result.xaml.g.h")
#include "Component.Result.xaml.g.h"
#else

namespace winrt::Component::implementation
{
    template <typename D, typename... I>
    using ResultT = Result_base<D, I...>;
}

#endif
