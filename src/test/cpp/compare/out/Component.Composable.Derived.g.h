// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/Component.Composable.h"
namespace winrt::Component::Composable::implementation
{
    template <typename D, typename B, typename... I>
    struct WINRT_EBO Derived_base : implements<D, Component::Composable::IDerived, B, no_module_lock, I...>
    {
        using base_type = Derived_base;
        using class_type = Component::Composable::Derived;
        using implements_type = typename Derived_base::implements_type;
        using implements_type::implements_type;
        
        operator impl::producer_ref<class_type> const() const noexcept
        {
            return { to_abi<default_interface<class_type>>(this) };
        }
        hstring GetRuntimeClassName() const
        {
            return L"Component.Composable.Derived";
        }
    };
}
namespace winrt::Component::Composable::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO DerivedT : implements<D, Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = Component::Composable::Derived;

        hstring GetRuntimeClassName() const
        {
            return L"Component.Composable.Derived";
        }
        Windows::Foundation::IInspectable ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_DERIVED_XAML_G_H) || __has_include("Component.Composable.Derived.xaml.g.h")
#include "Component.Composable.Derived.xaml.g.h"
#else

namespace winrt::Component::Composable::implementation
{
    template <typename D, typename... I>
    using DerivedT = Derived_base<D, I...>;
}

#endif
