// WARNING: Please don't edit this file. It was generated by Python/WinRT

#include "py.Windows.Media.h"

// ----- AutoRepeatModeChangeRequestedEventArgs class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>::python_type;


PyObject* AutoRepeatModeChangeRequestedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "AutoRepeatModeChangeRequestedEventArgs is not activatable");
    return nullptr;
}

static void AutoRepeatModeChangeRequestedEventArgs_dealloc(py::winrt_wrapper<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* AutoRepeatModeChangeRequestedEventArgs__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>::convert(instance.as<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* AutoRepeatModeChangeRequestedEventArgs_get_RequestedAutoRepeatMode(py::winrt_wrapper<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::MediaPlaybackAutoRepeatMode return_value = self->obj.RequestedAutoRepeatMode();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef AutoRepeatModeChangeRequestedEventArgs_methods[] = {
    { "get_RequestedAutoRepeatMode", (PyCFunction)AutoRepeatModeChangeRequestedEventArgs_get_RequestedAutoRepeatMode, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)AutoRepeatModeChangeRequestedEventArgs__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot AutoRepeatModeChangeRequestedEventArgs_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, AutoRepeatModeChangeRequestedEventArgs_dealloc },
    { Py_tp_new, AutoRepeatModeChangeRequestedEventArgs_new },
    { Py_tp_methods, AutoRepeatModeChangeRequestedEventArgs_methods },
    { 0, nullptr },
};

static PyType_Spec AutoRepeatModeChangeRequestedEventArgs_Type_spec =
{
    "AutoRepeatModeChangeRequestedEventArgs",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    AutoRepeatModeChangeRequestedEventArgs_Type_slots
};

// ----- ImageDisplayProperties class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::ImageDisplayProperties>::python_type;


PyObject* ImageDisplayProperties_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "ImageDisplayProperties is not activatable");
    return nullptr;
}

static void ImageDisplayProperties_dealloc(py::winrt_wrapper<winrt::Windows::Media::ImageDisplayProperties>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* ImageDisplayProperties__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::ImageDisplayProperties>::convert(instance.as<winrt::Windows::Media::ImageDisplayProperties>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* ImageDisplayProperties_get_Subtitle(py::winrt_wrapper<winrt::Windows::Media::ImageDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Subtitle();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* ImageDisplayProperties_get_Title(py::winrt_wrapper<winrt::Windows::Media::ImageDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Title();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* ImageDisplayProperties_put_Subtitle(py::winrt_wrapper<winrt::Windows::Media::ImageDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.Subtitle(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* ImageDisplayProperties_put_Title(py::winrt_wrapper<winrt::Windows::Media::ImageDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.Title(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef ImageDisplayProperties_methods[] = {
    { "get_Subtitle", (PyCFunction)ImageDisplayProperties_get_Subtitle, METH_NOARGS, nullptr },
    { "get_Title", (PyCFunction)ImageDisplayProperties_get_Title, METH_NOARGS, nullptr },
    { "put_Subtitle", (PyCFunction)ImageDisplayProperties_put_Subtitle, METH_O, nullptr },
    { "put_Title", (PyCFunction)ImageDisplayProperties_put_Title, METH_O, nullptr },
    { "_from", (PyCFunction)ImageDisplayProperties__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot ImageDisplayProperties_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, ImageDisplayProperties_dealloc },
    { Py_tp_new, ImageDisplayProperties_new },
    { Py_tp_methods, ImageDisplayProperties_methods },
    { 0, nullptr },
};

static PyType_Spec ImageDisplayProperties_Type_spec =
{
    "ImageDisplayProperties",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::ImageDisplayProperties>),
    0,
    Py_TPFLAGS_DEFAULT,
    ImageDisplayProperties_Type_slots
};

// ----- MediaExtensionManager class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MediaExtensionManager>::python_type;


PyObject* MediaExtensionManager_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }

    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Media::MediaExtensionManager instance{  };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static void MediaExtensionManager_dealloc(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* MediaExtensionManager__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::MediaExtensionManager>::convert(instance.as<winrt::Windows::Media::MediaExtensionManager>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* MediaExtensionManager_RegisterAudioDecoder(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);

            self->obj.RegisterAudioDecoder(param0, param1, param2);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 3);

            self->obj.RegisterAudioDecoder(param0, param1, param2, param3);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaExtensionManager_RegisterAudioEncoder(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);

            self->obj.RegisterAudioEncoder(param0, param1, param2);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 3);

            self->obj.RegisterAudioEncoder(param0, param1, param2, param3);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaExtensionManager_RegisterByteStreamHandler(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::hstring>(args, 1);
            auto param2 = py::convert_to<winrt::hstring>(args, 2);

            self->obj.RegisterByteStreamHandler(param0, param1, param2);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::hstring>(args, 1);
            auto param2 = py::convert_to<winrt::hstring>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 3);

            self->obj.RegisterByteStreamHandler(param0, param1, param2, param3);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaExtensionManager_RegisterMediaExtensionForAppService(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::IMediaExtension>(args, 0);
            auto param1 = py::convert_to<winrt::Windows::ApplicationModel::AppService::AppServiceConnection>(args, 1);

            self->obj.RegisterMediaExtensionForAppService(param0, param1);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaExtensionManager_RegisterSchemeHandler(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::hstring>(args, 1);

            self->obj.RegisterSchemeHandler(param0, param1);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::hstring>(args, 1);
            auto param2 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 2);

            self->obj.RegisterSchemeHandler(param0, param1, param2);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaExtensionManager_RegisterVideoDecoder(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);

            self->obj.RegisterVideoDecoder(param0, param1, param2);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 3);

            self->obj.RegisterVideoDecoder(param0, param1, param2, param3);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaExtensionManager_RegisterVideoEncoder(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);

            self->obj.RegisterVideoEncoder(param0, param1, param2);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::guid>(args, 1);
            auto param2 = py::convert_to<winrt::guid>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 3);

            self->obj.RegisterVideoEncoder(param0, param1, param2, param3);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyMethodDef MediaExtensionManager_methods[] = {
    { "RegisterAudioDecoder", (PyCFunction)MediaExtensionManager_RegisterAudioDecoder, METH_VARARGS, nullptr },
    { "RegisterAudioEncoder", (PyCFunction)MediaExtensionManager_RegisterAudioEncoder, METH_VARARGS, nullptr },
    { "RegisterByteStreamHandler", (PyCFunction)MediaExtensionManager_RegisterByteStreamHandler, METH_VARARGS, nullptr },
    { "RegisterMediaExtensionForAppService", (PyCFunction)MediaExtensionManager_RegisterMediaExtensionForAppService, METH_VARARGS, nullptr },
    { "RegisterSchemeHandler", (PyCFunction)MediaExtensionManager_RegisterSchemeHandler, METH_VARARGS, nullptr },
    { "RegisterVideoDecoder", (PyCFunction)MediaExtensionManager_RegisterVideoDecoder, METH_VARARGS, nullptr },
    { "RegisterVideoEncoder", (PyCFunction)MediaExtensionManager_RegisterVideoEncoder, METH_VARARGS, nullptr },
    { "_from", (PyCFunction)MediaExtensionManager__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot MediaExtensionManager_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, MediaExtensionManager_dealloc },
    { Py_tp_new, MediaExtensionManager_new },
    { Py_tp_methods, MediaExtensionManager_methods },
    { 0, nullptr },
};

static PyType_Spec MediaExtensionManager_Type_spec =
{
    "MediaExtensionManager",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::MediaExtensionManager>),
    0,
    Py_TPFLAGS_DEFAULT,
    MediaExtensionManager_Type_slots
};

// ----- MediaMarkerTypes class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MediaMarkerTypes>::python_type;


PyObject* MediaMarkerTypes_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "MediaMarkerTypes is not activatable");
    return nullptr;
}

static PyObject* MediaMarkerTypes_get_Bookmark(PyObject* /*unused*/, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = winrt::Windows::Media::MediaMarkerTypes::Bookmark();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef MediaMarkerTypes_methods[] = {
    { "get_Bookmark", (PyCFunction)MediaMarkerTypes_get_Bookmark, METH_NOARGS | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot MediaMarkerTypes_Type_slots[] = 
{
    { Py_tp_new, MediaMarkerTypes_new },
    { Py_tp_methods, MediaMarkerTypes_methods },
    { 0, nullptr },
};

static PyType_Spec MediaMarkerTypes_Type_spec =
{
    "MediaMarkerTypes",
    0,
    0,
    Py_TPFLAGS_DEFAULT,
    MediaMarkerTypes_Type_slots
};

// ----- MediaProcessingTriggerDetails class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MediaProcessingTriggerDetails>::python_type;


PyObject* MediaProcessingTriggerDetails_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "MediaProcessingTriggerDetails is not activatable");
    return nullptr;
}

static void MediaProcessingTriggerDetails_dealloc(py::winrt_wrapper<winrt::Windows::Media::MediaProcessingTriggerDetails>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* MediaProcessingTriggerDetails__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::MediaProcessingTriggerDetails>::convert(instance.as<winrt::Windows::Media::MediaProcessingTriggerDetails>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* MediaProcessingTriggerDetails_get_Arguments(py::winrt_wrapper<winrt::Windows::Media::MediaProcessingTriggerDetails>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::Collections::ValueSet return_value = self->obj.Arguments();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef MediaProcessingTriggerDetails_methods[] = {
    { "get_Arguments", (PyCFunction)MediaProcessingTriggerDetails_get_Arguments, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)MediaProcessingTriggerDetails__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot MediaProcessingTriggerDetails_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, MediaProcessingTriggerDetails_dealloc },
    { Py_tp_new, MediaProcessingTriggerDetails_new },
    { Py_tp_methods, MediaProcessingTriggerDetails_methods },
    { 0, nullptr },
};

static PyType_Spec MediaProcessingTriggerDetails_Type_spec =
{
    "MediaProcessingTriggerDetails",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::MediaProcessingTriggerDetails>),
    0,
    Py_TPFLAGS_DEFAULT,
    MediaProcessingTriggerDetails_Type_slots
};

// ----- MediaTimelineController class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MediaTimelineController>::python_type;


PyObject* MediaTimelineController_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }

    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Media::MediaTimelineController instance{  };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static void MediaTimelineController_dealloc(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* MediaTimelineController__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::MediaTimelineController>::convert(instance.as<winrt::Windows::Media::MediaTimelineController>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* MediaTimelineController_Pause(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.Pause();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaTimelineController_Resume(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.Resume();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaTimelineController_Start(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.Start();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* MediaTimelineController_add_Ended(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::MediaTimelineController, winrt::Windows::Foundation::IInspectable>>::convert_to(args);

            winrt::event_token return_value = self->obj.Ended(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_add_Failed(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::MediaTimelineController, winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.Failed(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_add_PositionChanged(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::MediaTimelineController, winrt::Windows::Foundation::IInspectable>>::convert_to(args);

            winrt::event_token return_value = self->obj.PositionChanged(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_add_StateChanged(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::MediaTimelineController, winrt::Windows::Foundation::IInspectable>>::convert_to(args);

            winrt::event_token return_value = self->obj.StateChanged(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_get_ClockRate(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            double return_value = self->obj.ClockRate();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_get_Duration(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.Duration();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_get_IsLoopingEnabled(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsLoopingEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_get_Position(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.Position();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_get_State(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::MediaTimelineControllerState return_value = self->obj.State();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_put_ClockRate(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<double>::convert_to(args);

            self->obj.ClockRate(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_put_Duration(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.Duration(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_put_IsLoopingEnabled(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsLoopingEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_put_Position(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(args);

            self->obj.Position(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_remove_Ended(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.Ended(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_remove_Failed(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.Failed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_remove_PositionChanged(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.PositionChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MediaTimelineController_remove_StateChanged(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.StateChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef MediaTimelineController_methods[] = {
    { "Pause", (PyCFunction)MediaTimelineController_Pause, METH_VARARGS, nullptr },
    { "Resume", (PyCFunction)MediaTimelineController_Resume, METH_VARARGS, nullptr },
    { "Start", (PyCFunction)MediaTimelineController_Start, METH_VARARGS, nullptr },
    { "add_Ended", (PyCFunction)MediaTimelineController_add_Ended, METH_O, nullptr },
    { "add_Failed", (PyCFunction)MediaTimelineController_add_Failed, METH_O, nullptr },
    { "add_PositionChanged", (PyCFunction)MediaTimelineController_add_PositionChanged, METH_O, nullptr },
    { "add_StateChanged", (PyCFunction)MediaTimelineController_add_StateChanged, METH_O, nullptr },
    { "get_ClockRate", (PyCFunction)MediaTimelineController_get_ClockRate, METH_NOARGS, nullptr },
    { "get_Duration", (PyCFunction)MediaTimelineController_get_Duration, METH_NOARGS, nullptr },
    { "get_IsLoopingEnabled", (PyCFunction)MediaTimelineController_get_IsLoopingEnabled, METH_NOARGS, nullptr },
    { "get_Position", (PyCFunction)MediaTimelineController_get_Position, METH_NOARGS, nullptr },
    { "get_State", (PyCFunction)MediaTimelineController_get_State, METH_NOARGS, nullptr },
    { "put_ClockRate", (PyCFunction)MediaTimelineController_put_ClockRate, METH_O, nullptr },
    { "put_Duration", (PyCFunction)MediaTimelineController_put_Duration, METH_O, nullptr },
    { "put_IsLoopingEnabled", (PyCFunction)MediaTimelineController_put_IsLoopingEnabled, METH_O, nullptr },
    { "put_Position", (PyCFunction)MediaTimelineController_put_Position, METH_O, nullptr },
    { "remove_Ended", (PyCFunction)MediaTimelineController_remove_Ended, METH_O, nullptr },
    { "remove_Failed", (PyCFunction)MediaTimelineController_remove_Failed, METH_O, nullptr },
    { "remove_PositionChanged", (PyCFunction)MediaTimelineController_remove_PositionChanged, METH_O, nullptr },
    { "remove_StateChanged", (PyCFunction)MediaTimelineController_remove_StateChanged, METH_O, nullptr },
    { "_from", (PyCFunction)MediaTimelineController__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot MediaTimelineController_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, MediaTimelineController_dealloc },
    { Py_tp_new, MediaTimelineController_new },
    { Py_tp_methods, MediaTimelineController_methods },
    { 0, nullptr },
};

static PyType_Spec MediaTimelineController_Type_spec =
{
    "MediaTimelineController",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineController>),
    0,
    Py_TPFLAGS_DEFAULT,
    MediaTimelineController_Type_slots
};

// ----- MediaTimelineControllerFailedEventArgs class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>::python_type;


PyObject* MediaTimelineControllerFailedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "MediaTimelineControllerFailedEventArgs is not activatable");
    return nullptr;
}

static void MediaTimelineControllerFailedEventArgs_dealloc(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* MediaTimelineControllerFailedEventArgs__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>::convert(instance.as<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* MediaTimelineControllerFailedEventArgs_get_ExtendedError(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hresult return_value = self->obj.ExtendedError();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef MediaTimelineControllerFailedEventArgs_methods[] = {
    { "get_ExtendedError", (PyCFunction)MediaTimelineControllerFailedEventArgs_get_ExtendedError, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)MediaTimelineControllerFailedEventArgs__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot MediaTimelineControllerFailedEventArgs_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, MediaTimelineControllerFailedEventArgs_dealloc },
    { Py_tp_new, MediaTimelineControllerFailedEventArgs_new },
    { Py_tp_methods, MediaTimelineControllerFailedEventArgs_methods },
    { 0, nullptr },
};

static PyType_Spec MediaTimelineControllerFailedEventArgs_Type_spec =
{
    "MediaTimelineControllerFailedEventArgs",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    MediaTimelineControllerFailedEventArgs_Type_slots
};

// ----- MusicDisplayProperties class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MusicDisplayProperties>::python_type;


PyObject* MusicDisplayProperties_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "MusicDisplayProperties is not activatable");
    return nullptr;
}

static void MusicDisplayProperties_dealloc(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* MusicDisplayProperties__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::MusicDisplayProperties>::convert(instance.as<winrt::Windows::Media::MusicDisplayProperties>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* MusicDisplayProperties_get_AlbumArtist(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.AlbumArtist();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_get_AlbumTitle(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.AlbumTitle();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_get_AlbumTrackCount(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            uint32_t return_value = self->obj.AlbumTrackCount();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_get_Artist(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Artist();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_get_Genres(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::Collections::IVector<winrt::hstring> return_value = self->obj.Genres();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_get_Title(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Title();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_get_TrackNumber(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            uint32_t return_value = self->obj.TrackNumber();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_put_AlbumArtist(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.AlbumArtist(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_put_AlbumTitle(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.AlbumTitle(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_put_AlbumTrackCount(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<uint32_t>::convert_to(args);

            self->obj.AlbumTrackCount(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_put_Artist(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.Artist(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_put_Title(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.Title(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* MusicDisplayProperties_put_TrackNumber(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<uint32_t>::convert_to(args);

            self->obj.TrackNumber(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef MusicDisplayProperties_methods[] = {
    { "get_AlbumArtist", (PyCFunction)MusicDisplayProperties_get_AlbumArtist, METH_NOARGS, nullptr },
    { "get_AlbumTitle", (PyCFunction)MusicDisplayProperties_get_AlbumTitle, METH_NOARGS, nullptr },
    { "get_AlbumTrackCount", (PyCFunction)MusicDisplayProperties_get_AlbumTrackCount, METH_NOARGS, nullptr },
    { "get_Artist", (PyCFunction)MusicDisplayProperties_get_Artist, METH_NOARGS, nullptr },
    { "get_Genres", (PyCFunction)MusicDisplayProperties_get_Genres, METH_NOARGS, nullptr },
    { "get_Title", (PyCFunction)MusicDisplayProperties_get_Title, METH_NOARGS, nullptr },
    { "get_TrackNumber", (PyCFunction)MusicDisplayProperties_get_TrackNumber, METH_NOARGS, nullptr },
    { "put_AlbumArtist", (PyCFunction)MusicDisplayProperties_put_AlbumArtist, METH_O, nullptr },
    { "put_AlbumTitle", (PyCFunction)MusicDisplayProperties_put_AlbumTitle, METH_O, nullptr },
    { "put_AlbumTrackCount", (PyCFunction)MusicDisplayProperties_put_AlbumTrackCount, METH_O, nullptr },
    { "put_Artist", (PyCFunction)MusicDisplayProperties_put_Artist, METH_O, nullptr },
    { "put_Title", (PyCFunction)MusicDisplayProperties_put_Title, METH_O, nullptr },
    { "put_TrackNumber", (PyCFunction)MusicDisplayProperties_put_TrackNumber, METH_O, nullptr },
    { "_from", (PyCFunction)MusicDisplayProperties__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot MusicDisplayProperties_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, MusicDisplayProperties_dealloc },
    { Py_tp_new, MusicDisplayProperties_new },
    { Py_tp_methods, MusicDisplayProperties_methods },
    { 0, nullptr },
};

static PyType_Spec MusicDisplayProperties_Type_spec =
{
    "MusicDisplayProperties",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::MusicDisplayProperties>),
    0,
    Py_TPFLAGS_DEFAULT,
    MusicDisplayProperties_Type_slots
};

// ----- ShuffleEnabledChangeRequestedEventArgs class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>::python_type;


PyObject* ShuffleEnabledChangeRequestedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "ShuffleEnabledChangeRequestedEventArgs is not activatable");
    return nullptr;
}

static void ShuffleEnabledChangeRequestedEventArgs_dealloc(py::winrt_wrapper<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* ShuffleEnabledChangeRequestedEventArgs__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>::convert(instance.as<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* ShuffleEnabledChangeRequestedEventArgs_get_RequestedShuffleEnabled(py::winrt_wrapper<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.RequestedShuffleEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef ShuffleEnabledChangeRequestedEventArgs_methods[] = {
    { "get_RequestedShuffleEnabled", (PyCFunction)ShuffleEnabledChangeRequestedEventArgs_get_RequestedShuffleEnabled, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)ShuffleEnabledChangeRequestedEventArgs__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot ShuffleEnabledChangeRequestedEventArgs_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, ShuffleEnabledChangeRequestedEventArgs_dealloc },
    { Py_tp_new, ShuffleEnabledChangeRequestedEventArgs_new },
    { Py_tp_methods, ShuffleEnabledChangeRequestedEventArgs_methods },
    { 0, nullptr },
};

static PyType_Spec ShuffleEnabledChangeRequestedEventArgs_Type_spec =
{
    "ShuffleEnabledChangeRequestedEventArgs",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    ShuffleEnabledChangeRequestedEventArgs_Type_slots
};

// ----- SystemMediaTransportControls class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::SystemMediaTransportControls>::python_type;


PyObject* SystemMediaTransportControls_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "SystemMediaTransportControls is not activatable");
    return nullptr;
}

static void SystemMediaTransportControls_dealloc(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* SystemMediaTransportControls__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::SystemMediaTransportControls>::convert(instance.as<winrt::Windows::Media::SystemMediaTransportControls>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* SystemMediaTransportControls_GetForCurrentView(PyObject* /*unused*/, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Media::SystemMediaTransportControls return_value = winrt::Windows::Media::SystemMediaTransportControls::GetForCurrentView();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* SystemMediaTransportControls_UpdateTimelineProperties(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>(args, 0);

            self->obj.UpdateTimelineProperties(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* SystemMediaTransportControls_add_AutoRepeatModeChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::SystemMediaTransportControls, winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.AutoRepeatModeChangeRequested(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_add_ButtonPressed(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::SystemMediaTransportControls, winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.ButtonPressed(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_add_PlaybackPositionChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::SystemMediaTransportControls, winrt::Windows::Media::PlaybackPositionChangeRequestedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.PlaybackPositionChangeRequested(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_add_PlaybackRateChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::SystemMediaTransportControls, winrt::Windows::Media::PlaybackRateChangeRequestedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.PlaybackRateChangeRequested(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_add_PropertyChanged(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::SystemMediaTransportControls, winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.PropertyChanged(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_add_ShuffleEnabledChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Media::SystemMediaTransportControls, winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>>::convert_to(args);

            winrt::event_token return_value = self->obj.ShuffleEnabledChangeRequested(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_AutoRepeatMode(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::MediaPlaybackAutoRepeatMode return_value = self->obj.AutoRepeatMode();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_DisplayUpdater(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater return_value = self->obj.DisplayUpdater();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsChannelDownEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsChannelDownEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsChannelUpEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsChannelUpEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsFastForwardEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsFastForwardEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsNextEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsNextEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsPauseEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsPauseEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsPlayEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsPlayEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsPreviousEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsPreviousEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsRecordEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsRecordEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsRewindEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsRewindEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_IsStopEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsStopEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_PlaybackRate(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            double return_value = self->obj.PlaybackRate();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_PlaybackStatus(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::MediaPlaybackStatus return_value = self->obj.PlaybackStatus();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_ShuffleEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.ShuffleEnabled();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_get_SoundLevel(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::SoundLevel return_value = self->obj.SoundLevel();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_AutoRepeatMode(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Media::MediaPlaybackAutoRepeatMode>::convert_to(args);

            self->obj.AutoRepeatMode(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsChannelDownEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsChannelDownEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsChannelUpEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsChannelUpEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsFastForwardEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsFastForwardEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsNextEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsNextEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsPauseEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsPauseEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsPlayEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsPlayEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsPreviousEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsPreviousEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsRecordEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsRecordEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsRewindEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsRewindEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_IsStopEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsStopEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_PlaybackRate(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<double>::convert_to(args);

            self->obj.PlaybackRate(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_PlaybackStatus(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Media::MediaPlaybackStatus>::convert_to(args);

            self->obj.PlaybackStatus(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_put_ShuffleEnabled(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.ShuffleEnabled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_remove_AutoRepeatModeChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.AutoRepeatModeChangeRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_remove_ButtonPressed(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.ButtonPressed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_remove_PlaybackPositionChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.PlaybackPositionChangeRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_remove_PlaybackRateChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.PlaybackRateChangeRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_remove_PropertyChanged(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.PropertyChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControls_remove_ShuffleEnabledChangeRequested(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::event_token>::convert_to(args);

            self->obj.ShuffleEnabledChangeRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef SystemMediaTransportControls_methods[] = {
    { "GetForCurrentView", (PyCFunction)SystemMediaTransportControls_GetForCurrentView, METH_VARARGS | METH_STATIC, nullptr },
    { "UpdateTimelineProperties", (PyCFunction)SystemMediaTransportControls_UpdateTimelineProperties, METH_VARARGS, nullptr },
    { "add_AutoRepeatModeChangeRequested", (PyCFunction)SystemMediaTransportControls_add_AutoRepeatModeChangeRequested, METH_O, nullptr },
    { "add_ButtonPressed", (PyCFunction)SystemMediaTransportControls_add_ButtonPressed, METH_O, nullptr },
    { "add_PlaybackPositionChangeRequested", (PyCFunction)SystemMediaTransportControls_add_PlaybackPositionChangeRequested, METH_O, nullptr },
    { "add_PlaybackRateChangeRequested", (PyCFunction)SystemMediaTransportControls_add_PlaybackRateChangeRequested, METH_O, nullptr },
    { "add_PropertyChanged", (PyCFunction)SystemMediaTransportControls_add_PropertyChanged, METH_O, nullptr },
    { "add_ShuffleEnabledChangeRequested", (PyCFunction)SystemMediaTransportControls_add_ShuffleEnabledChangeRequested, METH_O, nullptr },
    { "get_AutoRepeatMode", (PyCFunction)SystemMediaTransportControls_get_AutoRepeatMode, METH_NOARGS, nullptr },
    { "get_DisplayUpdater", (PyCFunction)SystemMediaTransportControls_get_DisplayUpdater, METH_NOARGS, nullptr },
    { "get_IsChannelDownEnabled", (PyCFunction)SystemMediaTransportControls_get_IsChannelDownEnabled, METH_NOARGS, nullptr },
    { "get_IsChannelUpEnabled", (PyCFunction)SystemMediaTransportControls_get_IsChannelUpEnabled, METH_NOARGS, nullptr },
    { "get_IsEnabled", (PyCFunction)SystemMediaTransportControls_get_IsEnabled, METH_NOARGS, nullptr },
    { "get_IsFastForwardEnabled", (PyCFunction)SystemMediaTransportControls_get_IsFastForwardEnabled, METH_NOARGS, nullptr },
    { "get_IsNextEnabled", (PyCFunction)SystemMediaTransportControls_get_IsNextEnabled, METH_NOARGS, nullptr },
    { "get_IsPauseEnabled", (PyCFunction)SystemMediaTransportControls_get_IsPauseEnabled, METH_NOARGS, nullptr },
    { "get_IsPlayEnabled", (PyCFunction)SystemMediaTransportControls_get_IsPlayEnabled, METH_NOARGS, nullptr },
    { "get_IsPreviousEnabled", (PyCFunction)SystemMediaTransportControls_get_IsPreviousEnabled, METH_NOARGS, nullptr },
    { "get_IsRecordEnabled", (PyCFunction)SystemMediaTransportControls_get_IsRecordEnabled, METH_NOARGS, nullptr },
    { "get_IsRewindEnabled", (PyCFunction)SystemMediaTransportControls_get_IsRewindEnabled, METH_NOARGS, nullptr },
    { "get_IsStopEnabled", (PyCFunction)SystemMediaTransportControls_get_IsStopEnabled, METH_NOARGS, nullptr },
    { "get_PlaybackRate", (PyCFunction)SystemMediaTransportControls_get_PlaybackRate, METH_NOARGS, nullptr },
    { "get_PlaybackStatus", (PyCFunction)SystemMediaTransportControls_get_PlaybackStatus, METH_NOARGS, nullptr },
    { "get_ShuffleEnabled", (PyCFunction)SystemMediaTransportControls_get_ShuffleEnabled, METH_NOARGS, nullptr },
    { "get_SoundLevel", (PyCFunction)SystemMediaTransportControls_get_SoundLevel, METH_NOARGS, nullptr },
    { "put_AutoRepeatMode", (PyCFunction)SystemMediaTransportControls_put_AutoRepeatMode, METH_O, nullptr },
    { "put_IsChannelDownEnabled", (PyCFunction)SystemMediaTransportControls_put_IsChannelDownEnabled, METH_O, nullptr },
    { "put_IsChannelUpEnabled", (PyCFunction)SystemMediaTransportControls_put_IsChannelUpEnabled, METH_O, nullptr },
    { "put_IsEnabled", (PyCFunction)SystemMediaTransportControls_put_IsEnabled, METH_O, nullptr },
    { "put_IsFastForwardEnabled", (PyCFunction)SystemMediaTransportControls_put_IsFastForwardEnabled, METH_O, nullptr },
    { "put_IsNextEnabled", (PyCFunction)SystemMediaTransportControls_put_IsNextEnabled, METH_O, nullptr },
    { "put_IsPauseEnabled", (PyCFunction)SystemMediaTransportControls_put_IsPauseEnabled, METH_O, nullptr },
    { "put_IsPlayEnabled", (PyCFunction)SystemMediaTransportControls_put_IsPlayEnabled, METH_O, nullptr },
    { "put_IsPreviousEnabled", (PyCFunction)SystemMediaTransportControls_put_IsPreviousEnabled, METH_O, nullptr },
    { "put_IsRecordEnabled", (PyCFunction)SystemMediaTransportControls_put_IsRecordEnabled, METH_O, nullptr },
    { "put_IsRewindEnabled", (PyCFunction)SystemMediaTransportControls_put_IsRewindEnabled, METH_O, nullptr },
    { "put_IsStopEnabled", (PyCFunction)SystemMediaTransportControls_put_IsStopEnabled, METH_O, nullptr },
    { "put_PlaybackRate", (PyCFunction)SystemMediaTransportControls_put_PlaybackRate, METH_O, nullptr },
    { "put_PlaybackStatus", (PyCFunction)SystemMediaTransportControls_put_PlaybackStatus, METH_O, nullptr },
    { "put_ShuffleEnabled", (PyCFunction)SystemMediaTransportControls_put_ShuffleEnabled, METH_O, nullptr },
    { "remove_AutoRepeatModeChangeRequested", (PyCFunction)SystemMediaTransportControls_remove_AutoRepeatModeChangeRequested, METH_O, nullptr },
    { "remove_ButtonPressed", (PyCFunction)SystemMediaTransportControls_remove_ButtonPressed, METH_O, nullptr },
    { "remove_PlaybackPositionChangeRequested", (PyCFunction)SystemMediaTransportControls_remove_PlaybackPositionChangeRequested, METH_O, nullptr },
    { "remove_PlaybackRateChangeRequested", (PyCFunction)SystemMediaTransportControls_remove_PlaybackRateChangeRequested, METH_O, nullptr },
    { "remove_PropertyChanged", (PyCFunction)SystemMediaTransportControls_remove_PropertyChanged, METH_O, nullptr },
    { "remove_ShuffleEnabledChangeRequested", (PyCFunction)SystemMediaTransportControls_remove_ShuffleEnabledChangeRequested, METH_O, nullptr },
    { "_from", (PyCFunction)SystemMediaTransportControls__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot SystemMediaTransportControls_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, SystemMediaTransportControls_dealloc },
    { Py_tp_new, SystemMediaTransportControls_new },
    { Py_tp_methods, SystemMediaTransportControls_methods },
    { 0, nullptr },
};

static PyType_Spec SystemMediaTransportControls_Type_spec =
{
    "SystemMediaTransportControls",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControls>),
    0,
    Py_TPFLAGS_DEFAULT,
    SystemMediaTransportControls_Type_slots
};

// ----- SystemMediaTransportControlsButtonPressedEventArgs class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>::python_type;


PyObject* SystemMediaTransportControlsButtonPressedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "SystemMediaTransportControlsButtonPressedEventArgs is not activatable");
    return nullptr;
}

static void SystemMediaTransportControlsButtonPressedEventArgs_dealloc(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* SystemMediaTransportControlsButtonPressedEventArgs__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>::convert(instance.as<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* SystemMediaTransportControlsButtonPressedEventArgs_get_Button(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::SystemMediaTransportControlsButton return_value = self->obj.Button();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef SystemMediaTransportControlsButtonPressedEventArgs_methods[] = {
    { "get_Button", (PyCFunction)SystemMediaTransportControlsButtonPressedEventArgs_get_Button, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)SystemMediaTransportControlsButtonPressedEventArgs__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot SystemMediaTransportControlsButtonPressedEventArgs_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, SystemMediaTransportControlsButtonPressedEventArgs_dealloc },
    { Py_tp_new, SystemMediaTransportControlsButtonPressedEventArgs_new },
    { Py_tp_methods, SystemMediaTransportControlsButtonPressedEventArgs_methods },
    { 0, nullptr },
};

static PyType_Spec SystemMediaTransportControlsButtonPressedEventArgs_Type_spec =
{
    "SystemMediaTransportControlsButtonPressedEventArgs",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    SystemMediaTransportControlsButtonPressedEventArgs_Type_slots
};

// ----- SystemMediaTransportControlsDisplayUpdater class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>::python_type;


PyObject* SystemMediaTransportControlsDisplayUpdater_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "SystemMediaTransportControlsDisplayUpdater is not activatable");
    return nullptr;
}

static void SystemMediaTransportControlsDisplayUpdater_dealloc(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* SystemMediaTransportControlsDisplayUpdater__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>::convert(instance.as<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_ClearAll(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.ClearAll();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_CopyFromFileAsync(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::MediaPlaybackType>(args, 0);
            auto param1 = py::convert_to<winrt::Windows::Storage::StorageFile>(args, 1);

            winrt::Windows::Foundation::IAsyncOperation<bool> return_value = self->obj.CopyFromFileAsync(param0, param1);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_Update(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.Update();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_get_AppMediaId(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.AppMediaId();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_get_ImageProperties(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::ImageDisplayProperties return_value = self->obj.ImageProperties();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_get_MusicProperties(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::MusicDisplayProperties return_value = self->obj.MusicProperties();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_get_Thumbnail(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Storage::Streams::RandomAccessStreamReference return_value = self->obj.Thumbnail();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_get_Type(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::MediaPlaybackType return_value = self->obj.Type();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_get_VideoProperties(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::VideoDisplayProperties return_value = self->obj.VideoProperties();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_put_AppMediaId(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.AppMediaId(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_put_Thumbnail(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Storage::Streams::RandomAccessStreamReference>::convert_to(args);

            self->obj.Thumbnail(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsDisplayUpdater_put_Type(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Media::MediaPlaybackType>::convert_to(args);

            self->obj.Type(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef SystemMediaTransportControlsDisplayUpdater_methods[] = {
    { "ClearAll", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_ClearAll, METH_VARARGS, nullptr },
    { "CopyFromFileAsync", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_CopyFromFileAsync, METH_VARARGS, nullptr },
    { "Update", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_Update, METH_VARARGS, nullptr },
    { "get_AppMediaId", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_get_AppMediaId, METH_NOARGS, nullptr },
    { "get_ImageProperties", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_get_ImageProperties, METH_NOARGS, nullptr },
    { "get_MusicProperties", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_get_MusicProperties, METH_NOARGS, nullptr },
    { "get_Thumbnail", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_get_Thumbnail, METH_NOARGS, nullptr },
    { "get_Type", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_get_Type, METH_NOARGS, nullptr },
    { "get_VideoProperties", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_get_VideoProperties, METH_NOARGS, nullptr },
    { "put_AppMediaId", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_put_AppMediaId, METH_O, nullptr },
    { "put_Thumbnail", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_put_Thumbnail, METH_O, nullptr },
    { "put_Type", (PyCFunction)SystemMediaTransportControlsDisplayUpdater_put_Type, METH_O, nullptr },
    { "_from", (PyCFunction)SystemMediaTransportControlsDisplayUpdater__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot SystemMediaTransportControlsDisplayUpdater_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, SystemMediaTransportControlsDisplayUpdater_dealloc },
    { Py_tp_new, SystemMediaTransportControlsDisplayUpdater_new },
    { Py_tp_methods, SystemMediaTransportControlsDisplayUpdater_methods },
    { 0, nullptr },
};

static PyType_Spec SystemMediaTransportControlsDisplayUpdater_Type_spec =
{
    "SystemMediaTransportControlsDisplayUpdater",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>),
    0,
    Py_TPFLAGS_DEFAULT,
    SystemMediaTransportControlsDisplayUpdater_Type_slots
};

// ----- SystemMediaTransportControlsPropertyChangedEventArgs class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>::python_type;


PyObject* SystemMediaTransportControlsPropertyChangedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "SystemMediaTransportControlsPropertyChangedEventArgs is not activatable");
    return nullptr;
}

static void SystemMediaTransportControlsPropertyChangedEventArgs_dealloc(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* SystemMediaTransportControlsPropertyChangedEventArgs__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>::convert(instance.as<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* SystemMediaTransportControlsPropertyChangedEventArgs_get_Property(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Media::SystemMediaTransportControlsProperty return_value = self->obj.Property();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef SystemMediaTransportControlsPropertyChangedEventArgs_methods[] = {
    { "get_Property", (PyCFunction)SystemMediaTransportControlsPropertyChangedEventArgs_get_Property, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)SystemMediaTransportControlsPropertyChangedEventArgs__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot SystemMediaTransportControlsPropertyChangedEventArgs_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, SystemMediaTransportControlsPropertyChangedEventArgs_dealloc },
    { Py_tp_new, SystemMediaTransportControlsPropertyChangedEventArgs_new },
    { Py_tp_methods, SystemMediaTransportControlsPropertyChangedEventArgs_methods },
    { 0, nullptr },
};

static PyType_Spec SystemMediaTransportControlsPropertyChangedEventArgs_Type_spec =
{
    "SystemMediaTransportControlsPropertyChangedEventArgs",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    SystemMediaTransportControlsPropertyChangedEventArgs_Type_slots
};

// ----- SystemMediaTransportControlsTimelineProperties class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>::python_type;


PyObject* SystemMediaTransportControlsTimelineProperties_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }

    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties instance{  };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static void SystemMediaTransportControlsTimelineProperties_dealloc(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* SystemMediaTransportControlsTimelineProperties__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>::convert(instance.as<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_get_EndTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.EndTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_get_MaxSeekTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.MaxSeekTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_get_MinSeekTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.MinSeekTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_get_Position(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.Position();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_get_StartTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.StartTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_put_EndTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(args);

            self->obj.EndTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_put_MaxSeekTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(args);

            self->obj.MaxSeekTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_put_MinSeekTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(args);

            self->obj.MinSeekTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_put_Position(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(args);

            self->obj.Position(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* SystemMediaTransportControlsTimelineProperties_put_StartTime(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(args);

            self->obj.StartTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef SystemMediaTransportControlsTimelineProperties_methods[] = {
    { "get_EndTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_get_EndTime, METH_NOARGS, nullptr },
    { "get_MaxSeekTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_get_MaxSeekTime, METH_NOARGS, nullptr },
    { "get_MinSeekTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_get_MinSeekTime, METH_NOARGS, nullptr },
    { "get_Position", (PyCFunction)SystemMediaTransportControlsTimelineProperties_get_Position, METH_NOARGS, nullptr },
    { "get_StartTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_get_StartTime, METH_NOARGS, nullptr },
    { "put_EndTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_put_EndTime, METH_O, nullptr },
    { "put_MaxSeekTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_put_MaxSeekTime, METH_O, nullptr },
    { "put_MinSeekTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_put_MinSeekTime, METH_O, nullptr },
    { "put_Position", (PyCFunction)SystemMediaTransportControlsTimelineProperties_put_Position, METH_O, nullptr },
    { "put_StartTime", (PyCFunction)SystemMediaTransportControlsTimelineProperties_put_StartTime, METH_O, nullptr },
    { "_from", (PyCFunction)SystemMediaTransportControlsTimelineProperties__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot SystemMediaTransportControlsTimelineProperties_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, SystemMediaTransportControlsTimelineProperties_dealloc },
    { Py_tp_new, SystemMediaTransportControlsTimelineProperties_new },
    { Py_tp_methods, SystemMediaTransportControlsTimelineProperties_methods },
    { 0, nullptr },
};

static PyType_Spec SystemMediaTransportControlsTimelineProperties_Type_spec =
{
    "SystemMediaTransportControlsTimelineProperties",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>),
    0,
    Py_TPFLAGS_DEFAULT,
    SystemMediaTransportControlsTimelineProperties_Type_slots
};

// ----- VideoDisplayProperties class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::VideoDisplayProperties>::python_type;


PyObject* VideoDisplayProperties_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "VideoDisplayProperties is not activatable");
    return nullptr;
}

static void VideoDisplayProperties_dealloc(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* VideoDisplayProperties__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::VideoDisplayProperties>::convert(instance.as<winrt::Windows::Media::VideoDisplayProperties>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* VideoDisplayProperties_get_Genres(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::Collections::IVector<winrt::hstring> return_value = self->obj.Genres();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoDisplayProperties_get_Subtitle(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Subtitle();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoDisplayProperties_get_Title(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Title();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoDisplayProperties_put_Subtitle(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.Subtitle(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoDisplayProperties_put_Title(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::hstring>::convert_to(args);

            self->obj.Title(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef VideoDisplayProperties_methods[] = {
    { "get_Genres", (PyCFunction)VideoDisplayProperties_get_Genres, METH_NOARGS, nullptr },
    { "get_Subtitle", (PyCFunction)VideoDisplayProperties_get_Subtitle, METH_NOARGS, nullptr },
    { "get_Title", (PyCFunction)VideoDisplayProperties_get_Title, METH_NOARGS, nullptr },
    { "put_Subtitle", (PyCFunction)VideoDisplayProperties_put_Subtitle, METH_O, nullptr },
    { "put_Title", (PyCFunction)VideoDisplayProperties_put_Title, METH_O, nullptr },
    { "_from", (PyCFunction)VideoDisplayProperties__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot VideoDisplayProperties_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, VideoDisplayProperties_dealloc },
    { Py_tp_new, VideoDisplayProperties_new },
    { Py_tp_methods, VideoDisplayProperties_methods },
    { 0, nullptr },
};

static PyType_Spec VideoDisplayProperties_Type_spec =
{
    "VideoDisplayProperties",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::VideoDisplayProperties>),
    0,
    Py_TPFLAGS_DEFAULT,
    VideoDisplayProperties_Type_slots
};

// ----- VideoEffects class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::VideoEffects>::python_type;


PyObject* VideoEffects_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "VideoEffects is not activatable");
    return nullptr;
}

static PyObject* VideoEffects_get_VideoStabilization(PyObject* /*unused*/, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = winrt::Windows::Media::VideoEffects::VideoStabilization();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef VideoEffects_methods[] = {
    { "get_VideoStabilization", (PyCFunction)VideoEffects_get_VideoStabilization, METH_NOARGS | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot VideoEffects_Type_slots[] = 
{
    { Py_tp_new, VideoEffects_new },
    { Py_tp_methods, VideoEffects_methods },
    { 0, nullptr },
};

static PyType_Spec VideoEffects_Type_spec =
{
    "VideoEffects",
    0,
    0,
    Py_TPFLAGS_DEFAULT,
    VideoEffects_Type_slots
};

// ----- VideoFrame class --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::VideoFrame>::python_type;


PyObject* VideoFrame_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }

    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::BitmapPixelFormat>(args, 0);
            auto param1 = py::convert_to<int32_t>(args, 1);
            auto param2 = py::convert_to<int32_t>(args, 2);
            winrt::Windows::Media::VideoFrame instance{ param0, param1, param2 };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::BitmapPixelFormat>(args, 0);
            auto param1 = py::convert_to<int32_t>(args, 1);
            auto param2 = py::convert_to<int32_t>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Graphics::Imaging::BitmapAlphaMode>(args, 3);
            winrt::Windows::Media::VideoFrame instance{ param0, param1, param2, param3 };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static void VideoFrame_dealloc(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* VideoFrame__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::VideoFrame>::convert(instance.as<winrt::Windows::Media::VideoFrame>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* VideoFrame_Close(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.Close();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* VideoFrame_CopyToAsync(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::VideoFrame>(args, 0);

            winrt::Windows::Foundation::IAsyncAction return_value = self->obj.CopyToAsync(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Media::VideoFrame>(args, 0);
            auto param1 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Graphics::Imaging::BitmapBounds>>(args, 1);
            auto param2 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Graphics::Imaging::BitmapBounds>>(args, 2);

            winrt::Windows::Foundation::IAsyncAction return_value = self->obj.CopyToAsync(param0, param1, param2);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* VideoFrame_CreateAsDirect3D11SurfaceBacked(PyObject* /*unused*/, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 3)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 0);
            auto param1 = py::convert_to<int32_t>(args, 1);
            auto param2 = py::convert_to<int32_t>(args, 2);

            winrt::Windows::Media::VideoFrame return_value = winrt::Windows::Media::VideoFrame::CreateAsDirect3D11SurfaceBacked(param0, param1, param2);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == 4)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(args, 0);
            auto param1 = py::convert_to<int32_t>(args, 1);
            auto param2 = py::convert_to<int32_t>(args, 2);
            auto param3 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>(args, 3);

            winrt::Windows::Media::VideoFrame return_value = winrt::Windows::Media::VideoFrame::CreateAsDirect3D11SurfaceBacked(param0, param1, param2, param3);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* VideoFrame_CreateWithDirect3D11Surface(PyObject* /*unused*/, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>(args, 0);

            winrt::Windows::Media::VideoFrame return_value = winrt::Windows::Media::VideoFrame::CreateWithDirect3D11Surface(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* VideoFrame_CreateWithSoftwareBitmap(PyObject* /*unused*/, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Graphics::Imaging::SoftwareBitmap>(args, 0);

            winrt::Windows::Media::VideoFrame return_value = winrt::Windows::Media::VideoFrame::CreateWithSoftwareBitmap(param0);

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* VideoFrame_get_Direct3DSurface(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface return_value = self->obj.Direct3DSurface();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_Duration(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.Duration();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_ExtendedProperties(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::Collections::IPropertySet return_value = self->obj.ExtendedProperties();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_IsDiscontinuous(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsDiscontinuous();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_IsReadOnly(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsReadOnly();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_RelativeTime(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.RelativeTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_SoftwareBitmap(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Graphics::Imaging::SoftwareBitmap return_value = self->obj.SoftwareBitmap();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_SystemRelativeTime(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.SystemRelativeTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_get_Type(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Type();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_put_Duration(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.Duration(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_put_IsDiscontinuous(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsDiscontinuous(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_put_RelativeTime(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.RelativeTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* VideoFrame_put_SystemRelativeTime(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.SystemRelativeTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef VideoFrame_methods[] = {
    { "Close", (PyCFunction)VideoFrame_Close, METH_VARARGS, nullptr },
    { "CopyToAsync", (PyCFunction)VideoFrame_CopyToAsync, METH_VARARGS, nullptr },
    { "CreateAsDirect3D11SurfaceBacked", (PyCFunction)VideoFrame_CreateAsDirect3D11SurfaceBacked, METH_VARARGS | METH_STATIC, nullptr },
    { "CreateWithDirect3D11Surface", (PyCFunction)VideoFrame_CreateWithDirect3D11Surface, METH_VARARGS | METH_STATIC, nullptr },
    { "CreateWithSoftwareBitmap", (PyCFunction)VideoFrame_CreateWithSoftwareBitmap, METH_VARARGS | METH_STATIC, nullptr },
    { "get_Direct3DSurface", (PyCFunction)VideoFrame_get_Direct3DSurface, METH_NOARGS, nullptr },
    { "get_Duration", (PyCFunction)VideoFrame_get_Duration, METH_NOARGS, nullptr },
    { "get_ExtendedProperties", (PyCFunction)VideoFrame_get_ExtendedProperties, METH_NOARGS, nullptr },
    { "get_IsDiscontinuous", (PyCFunction)VideoFrame_get_IsDiscontinuous, METH_NOARGS, nullptr },
    { "get_IsReadOnly", (PyCFunction)VideoFrame_get_IsReadOnly, METH_NOARGS, nullptr },
    { "get_RelativeTime", (PyCFunction)VideoFrame_get_RelativeTime, METH_NOARGS, nullptr },
    { "get_SoftwareBitmap", (PyCFunction)VideoFrame_get_SoftwareBitmap, METH_NOARGS, nullptr },
    { "get_SystemRelativeTime", (PyCFunction)VideoFrame_get_SystemRelativeTime, METH_NOARGS, nullptr },
    { "get_Type", (PyCFunction)VideoFrame_get_Type, METH_NOARGS, nullptr },
    { "put_Duration", (PyCFunction)VideoFrame_put_Duration, METH_O, nullptr },
    { "put_IsDiscontinuous", (PyCFunction)VideoFrame_put_IsDiscontinuous, METH_O, nullptr },
    { "put_RelativeTime", (PyCFunction)VideoFrame_put_RelativeTime, METH_O, nullptr },
    { "put_SystemRelativeTime", (PyCFunction)VideoFrame_put_SystemRelativeTime, METH_O, nullptr },
    { "_from", (PyCFunction)VideoFrame__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot VideoFrame_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, VideoFrame_dealloc },
    { Py_tp_new, VideoFrame_new },
    { Py_tp_methods, VideoFrame_methods },
    { 0, nullptr },
};

static PyType_Spec VideoFrame_Type_spec =
{
    "VideoFrame",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::VideoFrame>),
    0,
    Py_TPFLAGS_DEFAULT,
    VideoFrame_Type_slots
};

// ----- IMediaExtension interface --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::IMediaExtension>::python_type;


PyObject* IMediaExtension_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMediaExtension interface is not activatable");
    return nullptr;
}

static void IMediaExtension_dealloc(py::winrt_wrapper<winrt::Windows::Media::IMediaExtension>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IMediaExtension__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::IMediaExtension>::convert(instance.as<winrt::Windows::Media::IMediaExtension>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IMediaExtension_SetProperties(py::winrt_wrapper<winrt::Windows::Media::IMediaExtension>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IPropertySet>(args, 0);

            self->obj.SetProperties(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyMethodDef IMediaExtension_methods[] = {
    { "SetProperties", (PyCFunction)IMediaExtension_SetProperties, METH_VARARGS, nullptr },
    { "_from", (PyCFunction)IMediaExtension__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot IMediaExtension_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, IMediaExtension_dealloc },
    { Py_tp_new, IMediaExtension_new },
    { Py_tp_methods, IMediaExtension_methods },
    { 0, nullptr },
};

static PyType_Spec IMediaExtension_Type_spec =
{
    "IMediaExtension",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::IMediaExtension>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMediaExtension_Type_slots
};

// ----- IMediaFrame interface --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::IMediaFrame>::python_type;


PyObject* IMediaFrame_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMediaFrame interface is not activatable");
    return nullptr;
}

static void IMediaFrame_dealloc(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IMediaFrame__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::IMediaFrame>::convert(instance.as<winrt::Windows::Media::IMediaFrame>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IMediaFrame_Close(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    Py_ssize_t arg_count = PyTuple_Size(args);

    if (arg_count == 0)
    {
        try
        {
            self->obj.Close();
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count == -1)
    {
        return nullptr; 
    }

    PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    return nullptr;
}

static PyObject* IMediaFrame_get_Duration(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.Duration();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_get_ExtendedProperties(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::Collections::IPropertySet return_value = self->obj.ExtendedProperties();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_get_IsDiscontinuous(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsDiscontinuous();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_get_IsReadOnly(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            bool return_value = self->obj.IsReadOnly();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_get_RelativeTime(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.RelativeTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_get_SystemRelativeTime(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> return_value = self->obj.SystemRelativeTime();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_get_Type(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Type();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_put_Duration(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.Duration(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_put_IsDiscontinuous(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<bool>::convert_to(args);

            self->obj.IsDiscontinuous(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_put_RelativeTime(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.RelativeTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaFrame_put_SystemRelativeTime(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>* self, PyObject* args)
{ 
        try
        {
            auto param0 = py::converter<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>::convert_to(args);

            self->obj.SystemRelativeTime(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef IMediaFrame_methods[] = {
    { "Close", (PyCFunction)IMediaFrame_Close, METH_VARARGS, nullptr },
    { "get_Duration", (PyCFunction)IMediaFrame_get_Duration, METH_NOARGS, nullptr },
    { "get_ExtendedProperties", (PyCFunction)IMediaFrame_get_ExtendedProperties, METH_NOARGS, nullptr },
    { "get_IsDiscontinuous", (PyCFunction)IMediaFrame_get_IsDiscontinuous, METH_NOARGS, nullptr },
    { "get_IsReadOnly", (PyCFunction)IMediaFrame_get_IsReadOnly, METH_NOARGS, nullptr },
    { "get_RelativeTime", (PyCFunction)IMediaFrame_get_RelativeTime, METH_NOARGS, nullptr },
    { "get_SystemRelativeTime", (PyCFunction)IMediaFrame_get_SystemRelativeTime, METH_NOARGS, nullptr },
    { "get_Type", (PyCFunction)IMediaFrame_get_Type, METH_NOARGS, nullptr },
    { "put_Duration", (PyCFunction)IMediaFrame_put_Duration, METH_O, nullptr },
    { "put_IsDiscontinuous", (PyCFunction)IMediaFrame_put_IsDiscontinuous, METH_O, nullptr },
    { "put_RelativeTime", (PyCFunction)IMediaFrame_put_RelativeTime, METH_O, nullptr },
    { "put_SystemRelativeTime", (PyCFunction)IMediaFrame_put_SystemRelativeTime, METH_O, nullptr },
    { "_from", (PyCFunction)IMediaFrame__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot IMediaFrame_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, IMediaFrame_dealloc },
    { Py_tp_new, IMediaFrame_new },
    { Py_tp_methods, IMediaFrame_methods },
    { 0, nullptr },
};

static PyType_Spec IMediaFrame_Type_spec =
{
    "IMediaFrame",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::IMediaFrame>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMediaFrame_Type_slots
};

// ----- IMediaMarker interface --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::IMediaMarker>::python_type;


PyObject* IMediaMarker_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMediaMarker interface is not activatable");
    return nullptr;
}

static void IMediaMarker_dealloc(py::winrt_wrapper<winrt::Windows::Media::IMediaMarker>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IMediaMarker__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::IMediaMarker>::convert(instance.as<winrt::Windows::Media::IMediaMarker>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IMediaMarker_get_MediaMarkerType(py::winrt_wrapper<winrt::Windows::Media::IMediaMarker>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.MediaMarkerType();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaMarker_get_Text(py::winrt_wrapper<winrt::Windows::Media::IMediaMarker>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::hstring return_value = self->obj.Text();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyObject* IMediaMarker_get_Time(py::winrt_wrapper<winrt::Windows::Media::IMediaMarker>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::TimeSpan return_value = self->obj.Time();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef IMediaMarker_methods[] = {
    { "get_MediaMarkerType", (PyCFunction)IMediaMarker_get_MediaMarkerType, METH_NOARGS, nullptr },
    { "get_Text", (PyCFunction)IMediaMarker_get_Text, METH_NOARGS, nullptr },
    { "get_Time", (PyCFunction)IMediaMarker_get_Time, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)IMediaMarker__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot IMediaMarker_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, IMediaMarker_dealloc },
    { Py_tp_new, IMediaMarker_new },
    { Py_tp_methods, IMediaMarker_methods },
    { 0, nullptr },
};

static PyType_Spec IMediaMarker_Type_spec =
{
    "IMediaMarker",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::IMediaMarker>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMediaMarker_Type_slots
};

// ----- IMediaMarkers interface --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::IMediaMarkers>::python_type;


PyObject* IMediaMarkers_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMediaMarkers interface is not activatable");
    return nullptr;
}

static void IMediaMarkers_dealloc(py::winrt_wrapper<winrt::Windows::Media::IMediaMarkers>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IMediaMarkers__from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::converter<winrt::Windows::Media::IMediaMarkers>::convert(instance.as<winrt::Windows::Media::IMediaMarkers>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IMediaMarkers_get_Markers(py::winrt_wrapper<winrt::Windows::Media::IMediaMarkers>* self, PyObject* args)
{ 
    if (args != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "arguments not supported for get methods");
        return nullptr;
    }
        try
        {
            winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::IMediaMarker> return_value = self->obj.Markers();

            return py::converter<decltype(return_value)>::convert(return_value);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
}

static PyMethodDef IMediaMarkers_methods[] = {
    { "get_Markers", (PyCFunction)IMediaMarkers_get_Markers, METH_NOARGS, nullptr },
    { "_from", (PyCFunction)IMediaMarkers__from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyType_Slot IMediaMarkers_Type_slots[] = 
{
    { Py_tp_base, nullptr }, // filled out in module init
    { Py_tp_dealloc, IMediaMarkers_dealloc },
    { Py_tp_new, IMediaMarkers_new },
    { Py_tp_methods, IMediaMarkers_methods },
    { 0, nullptr },
};

static PyType_Spec IMediaMarkers_Type_spec =
{
    "IMediaMarkers",
    sizeof(py::winrt_wrapper<winrt::Windows::Media::IMediaMarkers>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMediaMarkers_Type_slots
};

// ----- MediaTimeRange struct --------------------
PyTypeObject* py::winrt_type<winrt::Windows::Media::MediaTimeRange>::python_type;

PyObject* py::converter<winrt::Windows::Media::MediaTimeRange>::convert(winrt::Windows::Media::MediaTimeRange instance) noexcept
{
    return py::wrap_struct<winrt::Windows::Media::MediaTimeRange>(instance, py::get_python_type<winrt::Windows::Media::MediaTimeRange>());
}

winrt::Windows::Media::MediaTimeRange py::converter<winrt::Windows::Media::MediaTimeRange>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);
    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Media::MediaTimeRange>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Media::MediaTimeRange>*>(obj)->obj;
    }
    
    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }
    
    winrt::Windows::Media::MediaTimeRange new_value{};
    PyObject* pyStart = PyDict_GetItemString(obj, "Start");
    if (!pyStart) { throw winrt::hresult_invalid_argument(); }
    new_value.Start = converter<winrt::Windows::Foundation::TimeSpan>::convert_to(pyStart);
    PyObject* pyEnd = PyDict_GetItemString(obj, "End");
    if (!pyEnd) { throw winrt::hresult_invalid_argument(); }
    new_value.End = converter<winrt::Windows::Foundation::TimeSpan>::convert_to(pyEnd);
    return new_value;
}

PyObject* MediaTimeRange_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    auto tuple_size = PyTuple_Size(args);
    if ((tuple_size == 0) && (kwds == nullptr))
    {
        try
        {
            winrt::Windows::Media::MediaTimeRange instance{};
            return py::wrap_struct(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    
    if ((tuple_size == 1) && (kwds == nullptr))
    {
        auto arg = PyTuple_GetItem(args, 0);
        if (PyDict_Check(arg))
        {
            try
            {
                auto instance = py::converter<winrt::Windows::Media::MediaTimeRange>::convert_to(arg); 
                return py::wrap_struct(instance, type);
            }
            catch (...)
            {
                return py::to_PyErr();
            }
        }
    }
    
    PyObject* _Start{};
    PyObject* _End{};
    static char* kwlist[] = {"Start", "End", nullptr};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &_Start, &_End))
    {
        return nullptr;
    }
    
    try
    {
        winrt::Windows::Media::MediaTimeRange instance{ py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(_Start), py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(_End) };
        return py::wrap_struct(instance, type);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* MediaTimeRange_get_Start(py::winrt_struct_wrapper<winrt::Windows::Media::MediaTimeRange>* self, void* /*unused*/)
{
    try
    {
        return py::converter<decltype(self->obj.Start)>::convert(self->obj.Start);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int MediaTimeRange_set_Start(py::winrt_struct_wrapper<winrt::Windows::Media::MediaTimeRange>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.Start = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyObject* MediaTimeRange_get_End(py::winrt_struct_wrapper<winrt::Windows::Media::MediaTimeRange>* self, void* /*unused*/)
{
    try
    {
        return py::converter<decltype(self->obj.End)>::convert(self->obj.End);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int MediaTimeRange_set_End(py::winrt_struct_wrapper<winrt::Windows::Media::MediaTimeRange>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.End = py::converter<winrt::Windows::Foundation::TimeSpan>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyGetSetDef MediaTimeRange_getset[] = {
    { const_cast<char*>("Start"), (getter)MediaTimeRange_get_Start, (setter)MediaTimeRange_set_Start, nullptr, nullptr },
    { const_cast<char*>("End"), (getter)MediaTimeRange_get_End, (setter)MediaTimeRange_set_End, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot MediaTimeRange_Type_slots[] = 
{
    { Py_tp_new, MediaTimeRange_new },
    { Py_tp_getset, MediaTimeRange_getset },
    { 0, nullptr },
};

static PyType_Spec MediaTimeRange_Type_spec =
{
    "MediaTimeRange",
    sizeof(py::winrt_struct_wrapper<winrt::Windows::Media::MediaTimeRange>),
    0,
    Py_TPFLAGS_DEFAULT,
    MediaTimeRange_Type_slots
};

// ----- Windows.Media Initialization --------------------

int initialize_Windows_Media(PyObject* module)
{
    PyObject* type_object{ nullptr };


    AutoRepeatModeChangeRequestedEventArgs_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&AutoRepeatModeChangeRequestedEventArgs_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "AutoRepeatModeChangeRequestedEventArgs", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::AutoRepeatModeChangeRequestedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    ImageDisplayProperties_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&ImageDisplayProperties_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "ImageDisplayProperties", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::ImageDisplayProperties>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    MediaExtensionManager_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&MediaExtensionManager_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MediaExtensionManager", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MediaExtensionManager>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    type_object = PyType_FromSpec(&MediaMarkerTypes_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MediaMarkerTypes", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MediaMarkerTypes>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    MediaProcessingTriggerDetails_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&MediaProcessingTriggerDetails_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MediaProcessingTriggerDetails", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MediaProcessingTriggerDetails>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    MediaTimelineController_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&MediaTimelineController_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MediaTimelineController", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MediaTimelineController>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    MediaTimelineControllerFailedEventArgs_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&MediaTimelineControllerFailedEventArgs_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MediaTimelineControllerFailedEventArgs", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MediaTimelineControllerFailedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    MusicDisplayProperties_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&MusicDisplayProperties_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MusicDisplayProperties", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MusicDisplayProperties>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    ShuffleEnabledChangeRequestedEventArgs_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&ShuffleEnabledChangeRequestedEventArgs_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "ShuffleEnabledChangeRequestedEventArgs", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::ShuffleEnabledChangeRequestedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    SystemMediaTransportControls_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&SystemMediaTransportControls_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "SystemMediaTransportControls", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::SystemMediaTransportControls>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    SystemMediaTransportControlsButtonPressedEventArgs_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&SystemMediaTransportControlsButtonPressedEventArgs_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "SystemMediaTransportControlsButtonPressedEventArgs", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    SystemMediaTransportControlsDisplayUpdater_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&SystemMediaTransportControlsDisplayUpdater_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "SystemMediaTransportControlsDisplayUpdater", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsDisplayUpdater>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    SystemMediaTransportControlsPropertyChangedEventArgs_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&SystemMediaTransportControlsPropertyChangedEventArgs_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "SystemMediaTransportControlsPropertyChangedEventArgs", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    SystemMediaTransportControlsTimelineProperties_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&SystemMediaTransportControlsTimelineProperties_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "SystemMediaTransportControlsTimelineProperties", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::SystemMediaTransportControlsTimelineProperties>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    VideoDisplayProperties_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&VideoDisplayProperties_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "VideoDisplayProperties", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::VideoDisplayProperties>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    type_object = PyType_FromSpec(&VideoEffects_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "VideoEffects", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::VideoEffects>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    VideoFrame_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&VideoFrame_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "VideoFrame", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::VideoFrame>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    IMediaExtension_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&IMediaExtension_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "IMediaExtension", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::IMediaExtension>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    IMediaFrame_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&IMediaFrame_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "IMediaFrame", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::IMediaFrame>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    IMediaMarker_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&IMediaMarker_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "IMediaMarker", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::IMediaMarker>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    IMediaMarkers_Type_slots[0].pfunc = py::winrt_type<py::winrt_base>::python_type;
    type_object = PyType_FromSpec(&IMediaMarkers_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "IMediaMarkers", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::IMediaMarkers>::python_type = reinterpret_cast<PyTypeObject*>(type_object);

    type_object = PyType_FromSpec(&MediaTimeRange_Type_spec);
    if (type_object == nullptr)
    {
        return -1;
    }
    if (PyModule_AddObject(module, "MediaTimeRange", type_object) != 0)
    {
        return -1;
    }
    py::winrt_type<winrt::Windows::Media::MediaTimeRange>::python_type = reinterpret_cast<PyTypeObject*>(type_object);
    
    return 0;
}
